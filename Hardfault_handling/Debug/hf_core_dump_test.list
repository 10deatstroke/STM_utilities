
hf_core_dump_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007db4  08007db4  0002fc3d  2**0
                  CONTENTS
  4 .ARM          00000008  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dbc  08007dbc  0002fc3d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002fc3d  2**0
                  CONTENTS
 10 .bss          00000940  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  0002007c  2**0
                  ALLOC
 12 .core_dump    0000003d  2001fc00  2001fc00  0002fc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 00000030  00000000  00000000  0002fc3d  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002fc6d  2**0
                  CONTENTS, READONLY
 15 .debug_info   000148b3  00000000  00000000  0002fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000038ff  00000000  00000000  00044563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001118  00000000  00000000  00047e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d01  00000000  00000000  00048f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002333e  00000000  00000000  00049c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00017a68  00000000  00000000  0006cfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cb086  00000000  00000000  00084a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004a18  00000000  00000000  0014fab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000080  00000000  00000000  001544c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d80 	.word	0x08007d80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007d80 	.word	0x08007d80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fc7d 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f823 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f91f 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d6:	f000 f889 	bl	80005ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80004da:	f000 f8b5 	bl	8000648 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004de:	f000 f8e3 	bl	80006a8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e2:	f006 fff9 	bl	80074d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  if(hf_counter > 10){
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0x50>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0a      	cmp	r3, #10
 80004ec:	d903      	bls.n	80004f6 <main+0x32>
	  hf_counter = 0;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <main+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	e005      	b.n	8000502 <main+0x3e>
  }else if(hf_counter == 0){
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <main+0x50>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <main+0x3e>
	  int powered_on = 1;
 80004fe:	2301      	movs	r3, #1
 8000500:	607b      	str	r3, [r7, #4]
	  UNUSED(powered_on);
  }

  add(10,5,(int*)&hf_counter);
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <main+0x50>)
 8000504:	2105      	movs	r1, #5
 8000506:	200a      	movs	r0, #10
 8000508:	f000 fa02 	bl	8000910 <add>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050c:	f007 f80a 	bl	8007524 <MX_USB_HOST_Process>
 8000510:	e7fc      	b.n	800050c <main+0x48>
 8000512:	bf00      	nop
 8000514:	2001fc3c 	.word	0x2001fc3c

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fb9a 	bl	8007c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f978 	bl	8003894 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f9ca 	bl	8000942 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fbd9 	bl	8003d84 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f9b3 	bl	8000942 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x50>)
 800062a:	f002 fb4f 	bl	8002ccc <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f985 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000098 	.word	0x20000098
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2S3_Init+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <MX_I2S3_Init+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_I2S3_Init+0x54>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <MX_I2S3_Init+0x5c>)
 8000672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2S3_Init+0x54>)
 8000688:	f002 fc64 	bl	8002f54 <HAL_I2S_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000692:	f000 f956 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000ec 	.word	0x200000ec
 80006a0:	40003c00 	.word	0x40003c00
 80006a4:	00017700 	.word	0x00017700

080006a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f003 fe8f 	bl	800441c <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f91d 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000134 	.word	0x20000134
 8000710:	40013000 	.word	0x40013000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	4b72      	ldr	r3, [pc, #456]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a71      	ldr	r2, [pc, #452]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	4b6b      	ldr	r3, [pc, #428]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a6a      	ldr	r2, [pc, #424]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a63      	ldr	r2, [pc, #396]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b61      	ldr	r3, [pc, #388]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a5c      	ldr	r2, [pc, #368]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a55      	ldr	r2, [pc, #340]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	4849      	ldr	r0, [pc, #292]	; (80008fc <MX_GPIO_Init+0x1e8>)
 80007d8:	f000 fe54 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	4847      	ldr	r0, [pc, #284]	; (8000900 <MX_GPIO_Init+0x1ec>)
 80007e2:	f000 fe4f 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e6:	2200      	movs	r2, #0
 80007e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007ec:	4845      	ldr	r0, [pc, #276]	; (8000904 <MX_GPIO_Init+0x1f0>)
 80007ee:	f000 fe49 	bl	8001484 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	483c      	ldr	r0, [pc, #240]	; (80008fc <MX_GPIO_Init+0x1e8>)
 800080a:	f000 fc9f 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4836      	ldr	r0, [pc, #216]	; (8000900 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fc91 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082a:	2308      	movs	r3, #8
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083a:	2305      	movs	r3, #5
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	482e      	ldr	r0, [pc, #184]	; (8000900 <MX_GPIO_Init+0x1ec>)
 8000846:	f000 fc81 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800084e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	482a      	ldr	r0, [pc, #168]	; (8000908 <MX_GPIO_Init+0x1f4>)
 8000860:	f000 fc74 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4825      	ldr	r0, [pc, #148]	; (800090c <MX_GPIO_Init+0x1f8>)
 8000878:	f000 fc68 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <MX_GPIO_Init+0x1f8>)
 800089a:	f000 fc57 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_GPIO_Init+0x1f0>)
 80008b8:	f000 fc48 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_GPIO_Init+0x1f0>)
 80008d0:	f000 fc3c 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0x1e8>)
 80008ea:	f000 fc2f 	bl	800114c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400

08000910 <add>:

/* USER CODE BEGIN 4 */
int add(int a, int b, int *cptr){
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	int sum = a + b + *cptr;
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	441a      	add	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	61fb      	str	r3, [r7, #28]
	add_ptr func = NULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
	int jump = func(a, b);
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	4798      	blx	r3
 8000936:	6178      	str	r0, [r7, #20]
	UNUSED(jump);
	return sum;
 8000938:	69fb      	ldr	r3, [r7, #28]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fb98 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_I2C_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_I2C_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_I2C_MspInit+0x88>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_I2C_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ec:	2304      	movs	r3, #4
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <HAL_I2C_MspInit+0x8c>)
 80009f8:	f000 fba8 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a31      	ldr	r2, [pc, #196]	; (8000b1c <HAL_I2S_MspInit+0xf0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d15a      	bne.n	8000b12 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a60:	23c0      	movs	r3, #192	; 0xc0
 8000a62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fb95 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a78:	f7ff ff63 	bl	8000942 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_I2S_MspInit+0xf4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <HAL_I2S_MspInit+0xf8>)
 8000aec:	f000 fb2e 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000af0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b02:	2306      	movs	r3, #6
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <HAL_I2S_MspInit+0xfc>)
 8000b0e:	f000 fb1d 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3738      	adds	r7, #56	; 0x38
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40003c00 	.word	0x40003c00
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020800 	.word	0x40020800

08000b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b86:	23e0      	movs	r3, #224	; 0xe0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_SPI_MspInit+0x8c>)
 8000ba2:	f000 fad3 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>
	...

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	hf_counter++;
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	4a2c      	ldr	r2, [pc, #176]	; (8000c80 <HardFault_Handler+0xbc>)
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	60ba      	str	r2, [r7, #8]
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	1c53      	adds	r3, r2, #1
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	7a3b      	ldrb	r3, [r7, #8]
 8000bf6:	60ba      	str	r2, [r7, #8]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HardFault_Handler+0xbc>)
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	713b      	strb	r3, [r7, #4]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	793a      	ldrb	r2, [r7, #4]
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
	register uint32_t HF_R10 __asm("r10");
	register uint32_t HF_R11 __asm("r11");
	register uint32_t HF_R12 __asm("r12");
	register uint32_t HF_SP __asm("sp");
	register uint32_t HF_LR __asm("lr");
	hf_registers[0] = HF_R0;
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6003      	str	r3, [r0, #0]
 8000c28:	68bb      	ldr	r3, [r7, #8]
	hf_registers[1] = HF_R1;
 8000c2a:	4816      	ldr	r0, [pc, #88]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c2c:	6041      	str	r1, [r0, #4]
	hf_registers[2] = HF_R2;
 8000c2e:	4915      	ldr	r1, [pc, #84]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c30:	608a      	str	r2, [r1, #8]
	hf_registers[3] = HF_R3;
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c34:	60d3      	str	r3, [r2, #12]
	hf_registers[4] = HF_R4;
 8000c36:	4623      	mov	r3, r4
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c3a:	6113      	str	r3, [r2, #16]
	hf_registers[5] = HF_R5;
 8000c3c:	462b      	mov	r3, r5
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c40:	6153      	str	r3, [r2, #20]
	hf_registers[6] = HF_R6;
 8000c42:	4633      	mov	r3, r6
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c46:	6193      	str	r3, [r2, #24]
	hf_registers[7] = HF_R7;
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c4c:	61d3      	str	r3, [r2, #28]
	hf_registers[8] = HF_R8;
 8000c4e:	4643      	mov	r3, r8
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c52:	6213      	str	r3, [r2, #32]
	hf_registers[9] = HF_R9;
 8000c54:	464b      	mov	r3, r9
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c58:	6253      	str	r3, [r2, #36]	; 0x24
	hf_registers[10] = HF_R10;
 8000c5a:	4653      	mov	r3, sl
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c5e:	6293      	str	r3, [r2, #40]	; 0x28
	hf_registers[11] = HF_R11;
 8000c60:	465b      	mov	r3, fp
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c64:	62d3      	str	r3, [r2, #44]	; 0x2c
	hf_registers[12] = HF_R12;
 8000c66:	4663      	mov	r3, ip
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
	hf_registers[13] = HF_SP;
 8000c6c:	466b      	mov	r3, sp
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c70:	6353      	str	r3, [r2, #52]	; 0x34
	hf_registers[14] = HF_LR;
 8000c72:	4673      	mov	r3, lr
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HardFault_Handler+0xc0>)
 8000c76:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_NVIC_SystemReset();
 8000c78:	f000 fa57 	bl	800112a <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <HardFault_Handler+0xb8>
 8000c7e:	bf00      	nop
 8000c80:	2001fc3c 	.word	0x2001fc3c
 8000c84:	2001fc00 	.word	0x2001fc00

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f8d0 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <OTG_FS_IRQHandler+0x10>)
 8000cd6:	f000 fe59 	bl	800198c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000570 	.word	0x20000570

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f006 ffbc 	bl	8007c90 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2001fc00 	.word	0x2001fc00
 8000d44:	00000400 	.word	0x00000400
 8000d48:	2000018c 	.word	0x2000018c
 8000d4c:	200009c0 	.word	0x200009c0

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7a:	490e      	ldr	r1, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d90:	4c0b      	ldr	r4, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffd7 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f006 ff7b 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fb8d 	bl	80004c4 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	2001fc00 	.word	0x2001fc00
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000db8:	08007dc4 	.word	0x08007dc4
  ldr r2, =_sbss
 8000dbc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dc0:	200009bc 	.word	0x200009bc

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f965 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fda6 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f981 	bl	8001132 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f945 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000190 	.word	0x20000190

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000190 	.word	0x20000190

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001054:	f3bf 8f4f 	dsb	sy
}
 8001058:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <__NVIC_SystemReset+0x24>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001062:	4904      	ldr	r1, [pc, #16]	; (8001074 <__NVIC_SystemReset+0x24>)
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_SystemReset+0x28>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800106a:	f3bf 8f4f 	dsb	sy
}
 800106e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <__NVIC_SystemReset+0x20>
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	05fa0004 	.word	0x05fa0004

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff78 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff13 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff28 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff78 	bl	8000fe8 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff47 	bl	8000f94 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff1b 	bl	8000f58 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800112e:	f7ff ff8f 	bl	8001050 <__NVIC_SystemReset>

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff9e 	bl	800107c <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e16b      	b.n	8001440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 815a 	bne.w	800143a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80b4 	beq.w	800143a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b60      	ldr	r3, [pc, #384]	; (8001458 <HAL_GPIO_Init+0x30c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a5f      	ldr	r2, [pc, #380]	; (8001458 <HAL_GPIO_Init+0x30c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_GPIO_Init+0x310>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a52      	ldr	r2, [pc, #328]	; (8001460 <HAL_GPIO_Init+0x314>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x226>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a51      	ldr	r2, [pc, #324]	; (8001464 <HAL_GPIO_Init+0x318>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x222>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a50      	ldr	r2, [pc, #320]	; (8001468 <HAL_GPIO_Init+0x31c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x21e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4f      	ldr	r2, [pc, #316]	; (800146c <HAL_GPIO_Init+0x320>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x21a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_GPIO_Init+0x324>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x216>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <HAL_GPIO_Init+0x328>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x212>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <HAL_GPIO_Init+0x32c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4b      	ldr	r2, [pc, #300]	; (800147c <HAL_GPIO_Init+0x330>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x20a>
 8001352:	2307      	movs	r3, #7
 8001354:	e00e      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001356:	2308      	movs	r3, #8
 8001358:	e00c      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800135a:	2306      	movs	r3, #6
 800135c:	e00a      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800135e:	2305      	movs	r3, #5
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001362:	2304      	movs	r3, #4
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x228>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x228>
 8001372:	2300      	movs	r3, #0
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <HAL_GPIO_Init+0x310>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_GPIO_Init+0x334>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b6:	4a32      	ldr	r2, [pc, #200]	; (8001480 <HAL_GPIO_Init+0x334>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_GPIO_Init+0x334>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_GPIO_Init+0x334>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_GPIO_Init+0x334>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_GPIO_Init+0x334>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_GPIO_Init+0x334>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <HAL_GPIO_Init+0x334>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	f67f ae90 	bls.w	8001168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40021400 	.word	0x40021400
 8001478:	40021800 	.word	0x40021800
 800147c:	40021c00 	.word	0x40021c00
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b8:	b08f      	sub	sp, #60	; 0x3c
 80014ba:	af0a      	add	r7, sp, #40	; 0x28
 80014bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e054      	b.n	8001572 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f006 f856 	bl	8007594 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f883 	bl	8004612 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	687e      	ldr	r6, [r7, #4]
 8001514:	466d      	mov	r5, sp
 8001516:	f106 0410 	add.w	r4, r6, #16
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001526:	e885 0003 	stmia.w	r5, {r0, r1}
 800152a:	1d33      	adds	r3, r6, #4
 800152c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f002 fffd 	bl	800452e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f87a 	bl	8004634 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	687e      	ldr	r6, [r7, #4]
 8001548:	466d      	mov	r5, sp
 800154a:	f106 0410 	add.w	r4, r6, #16
 800154e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155a:	e885 0003 	stmia.w	r5, {r0, r1}
 800155e:	1d33      	adds	r3, r6, #4
 8001560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f003 fa02 	bl	800496c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b089      	sub	sp, #36	; 0x24
 800157e:	af04      	add	r7, sp, #16
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	461a      	mov	r2, r3
 8001588:	4603      	mov	r3, r0
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	460b      	mov	r3, r1
 800158e:	70bb      	strb	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_HCD_HC_Init+0x28>
 800159e:	2302      	movs	r3, #2
 80015a0:	e076      	b.n	8001690 <HAL_HCD_HC_Init+0x116>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	333d      	adds	r3, #61	; 0x3d
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	212c      	movs	r1, #44	; 0x2c
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	3338      	adds	r3, #56	; 0x38
 80015ca:	787a      	ldrb	r2, [r7, #1]
 80015cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	212c      	movs	r1, #44	; 0x2c
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	3340      	adds	r3, #64	; 0x40
 80015dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	212c      	movs	r1, #44	; 0x2c
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	3339      	adds	r3, #57	; 0x39
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	333f      	adds	r3, #63	; 0x3f
 8001600:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800160e:	b2d0      	uxtb	r0, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	333a      	adds	r3, #58	; 0x3a
 800161c:	4602      	mov	r2, r0
 800161e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001620:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da09      	bge.n	800163c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	333b      	adds	r3, #59	; 0x3b
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e008      	b.n	800164e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	333b      	adds	r3, #59	; 0x3b
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	212c      	movs	r1, #44	; 0x2c
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	333c      	adds	r3, #60	; 0x3c
 800165c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001660:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	787c      	ldrb	r4, [r7, #1]
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	78f9      	ldrb	r1, [r7, #3]
 800166c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4623      	mov	r3, r4
 800167e:	f003 fafb 	bl	8004c78 <USB_HC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}

08001698 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_HCD_HC_Halt+0x1e>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e00f      	b.n	80016d6 <HAL_HCD_HC_Halt+0x3e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 fd4b 	bl	8005162 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70bb      	strb	r3, [r7, #2]
 80016f6:	4613      	mov	r3, r2
 80016f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	333b      	adds	r3, #59	; 0x3b
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	333f      	adds	r3, #63	; 0x3f
 800171a:	787a      	ldrb	r2, [r7, #1]
 800171c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800171e:	7c3b      	ldrb	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2203      	movs	r2, #3
 8001734:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	333d      	adds	r3, #61	; 0x3d
 8001744:	7f3a      	ldrb	r2, [r7, #28]
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e008      	b.n	800175c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3342      	adds	r3, #66	; 0x42
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b03      	cmp	r3, #3
 8001760:	f200 80c6 	bhi.w	80018f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	080018dd 	.word	0x080018dd
 8001774:	080017e1 	.word	0x080017e1
 8001778:	0800185f 	.word	0x0800185f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	f040 80b8 	bne.w	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80b4 	bne.w	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d108      	bne.n	80017a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3355      	adds	r3, #85	; 0x55
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3355      	adds	r3, #85	; 0x55
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ca:	e093      	b.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e089      	b.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017e0:	78bb      	ldrb	r3, [r7, #2]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11d      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3355      	adds	r3, #85	; 0x55
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3342      	adds	r3, #66	; 0x42
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800180c:	e073      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e069      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3354      	adds	r3, #84	; 0x54
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3342      	adds	r3, #66	; 0x42
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
      break;
 8001848:	e055      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
      break;
 800185c:	e04b      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11d      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3355      	adds	r3, #85	; 0x55
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800188a:	e034      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e02a      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3354      	adds	r3, #84	; 0x54
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e016      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3342      	adds	r3, #66	; 0x42
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e00c      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3344      	adds	r3, #68	; 0x44
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	8b3a      	ldrh	r2, [r7, #24]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	202c      	movs	r0, #44	; 0x2c
 8001910:	fb00 f303 	mul.w	r3, r0, r3
 8001914:	440b      	add	r3, r1
 8001916:	334c      	adds	r3, #76	; 0x4c
 8001918:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3360      	adds	r3, #96	; 0x60
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3350      	adds	r3, #80	; 0x50
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3339      	adds	r3, #57	; 0x39
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3361      	adds	r3, #97	; 0x61
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	222c      	movs	r2, #44	; 0x2c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	18d1      	adds	r1, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f003 fa9e 	bl	8004ebc <USB_HC_StartXfer>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop

0800198c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ff9f 	bl	80048e6 <USB_GetMode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 80f6 	bne.w	8001b9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 ff83 	bl	80048c0 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ec 	beq.w	8001b9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 ff7a 	bl	80048c0 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019d6:	d104      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 ff6a 	bl	80048c0 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d104      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 ff5a 	bl	80048c0 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 ff4a 	bl	80048c0 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d103      	bne.n	8001a3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 ff3c 	bl	80048c0 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a52:	d11c      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a6e:	2110      	movs	r1, #16
 8001a70:	6938      	ldr	r0, [r7, #16]
 8001a72:	f002 fe2b 	bl	80046cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a76:	6938      	ldr	r0, [r7, #16]
 8001a78:	f002 fe5c 	bl	8004734 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f832 	bl	8004aec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f005 fe01 	bl	8007690 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 ff14 	bl	80048c0 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa2:	d102      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 f89e 	bl	8002be6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 ff06 	bl	80048c0 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d106      	bne.n	8001acc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f005 fdca 	bl	8007658 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fef5 	bl	80048c0 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d101      	bne.n	8001ae4 <HAL_HCD_IRQHandler+0x158>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_HCD_IRQHandler+0x15a>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d012      	beq.n	8001b10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0210 	bic.w	r2, r2, #16
 8001af8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 ffa1 	bl	8002a42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0210 	orr.w	r2, r2, #16
 8001b0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fed3 	bl	80048c0 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b24:	d13a      	bne.n	8001b9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fb08 	bl	8005140 <USB_HC_ReadInterrupt>
 8001b30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e025      	b.n	8001b84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d018      	beq.n	8001b7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b62:	d106      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8ab 	bl	8001cc6 <HCD_HC_IN_IRQHandler>
 8001b70:	e005      	b.n	8001b7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fbf9 	bl	8002370 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d3d4      	bcc.n	8001b38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	e000      	b.n	8001b9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001b9a:	bf00      	nop
    }
  }
}
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_HCD_Start+0x16>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e013      	b.n	8001be0 <HAL_HCD_Start+0x3e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fff4 	bl	8004bb4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fd0d 	bl	80045f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_HCD_Stop+0x16>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e00d      	b.n	8001c1a <HAL_HCD_Stop+0x32>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fbe2 	bl	80053d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 ff96 	bl	8004b60 <USB_ResetPort>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3360      	adds	r3, #96	; 0x60
 8001c58:	781b      	ldrb	r3, [r3, #0]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3350      	adds	r3, #80	; 0x50
 8001c80:	681b      	ldr	r3, [r3, #0]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 ffda 	bl	8004c54 <USB_GetCurrentFrame>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 ffb5 	bl	8004c26 <USB_GetHostSpeed>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d11a      	bne.n	8001d2c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2304      	movs	r3, #4
 8001d06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3361      	adds	r3, #97	; 0x61
 8001d16:	2206      	movs	r2, #6
 8001d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fa1c 	bl	8005162 <USB_HC_Halt>
 8001d2a:	e0af      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d11b      	bne.n	8001d7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3361      	adds	r3, #97	; 0x61
 8001d66:	2207      	movs	r2, #7
 8001d68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f9f4 	bl	8005162 <USB_HC_Halt>
 8001d7a:	e087      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d109      	bne.n	8001da6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2320      	movs	r3, #32
 8001da2:	6093      	str	r3, [r2, #8]
 8001da4:	e072      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d11a      	bne.n	8001df2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2308      	movs	r3, #8
 8001dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3361      	adds	r3, #97	; 0x61
 8001ddc:	2205      	movs	r2, #5
 8001dde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 f9b9 	bl	8005162 <USB_HC_Halt>
 8001df0:	e04c      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e08:	d11b      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	461a      	mov	r2, r3
 8001e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3361      	adds	r3, #97	; 0x61
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 f991 	bl	8005162 <USB_HC_Halt>
 8001e40:	e024      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d119      	bne.n	8001e8c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	461a      	mov	r2, r3
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3361      	adds	r3, #97	; 0x61
 8001e78:	2206      	movs	r2, #6
 8001e7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 f96b 	bl	8005162 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea2:	d112      	bne.n	8001eca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 f957 	bl	8005162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ec8:	e24e      	b.n	8002368 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 80df 	bne.w	80020a0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d019      	beq.n	8001f1e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3348      	adds	r3, #72	; 0x48
 8001ef8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0159      	lsls	r1, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f0c:	1ad2      	subs	r2, r2, r3
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	202c      	movs	r0, #44	; 0x2c
 8001f14:	fb00 f303 	mul.w	r3, r0, r3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3350      	adds	r3, #80	; 0x50
 8001f1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3361      	adds	r3, #97	; 0x61
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	212c      	movs	r1, #44	; 0x2c
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	335c      	adds	r3, #92	; 0x5c
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2301      	movs	r3, #1
 8001f52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	333f      	adds	r3, #63	; 0x3f
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d111      	bne.n	8001fa0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 f8eb 	bl	8005162 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	6093      	str	r3, [r2, #8]
 8001f9e:	e03a      	b.n	8002016 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	333f      	adds	r3, #63	; 0x3f
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d009      	beq.n	8001fc8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	333f      	adds	r3, #63	; 0x3f
 8001fc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d126      	bne.n	8002016 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	0151      	lsls	r1, r2, #5
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	440a      	add	r2, r1
 8001fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fe6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3360      	adds	r3, #96	; 0x60
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	b2d9      	uxtb	r1, r3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	202c      	movs	r0, #44	; 0x2c
 8002004:	fb00 f303 	mul.w	r3, r0, r3
 8002008:	4413      	add	r3, r2
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f005 fb4b 	bl	80076ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d12b      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3348      	adds	r3, #72	; 0x48
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	202c      	movs	r0, #44	; 0x2c
 8002034:	fb00 f202 	mul.w	r2, r0, r2
 8002038:	440a      	add	r2, r1
 800203a:	3240      	adds	r2, #64	; 0x40
 800203c:	8812      	ldrh	r2, [r2, #0]
 800203e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 818e 	beq.w	8002368 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3354      	adds	r3, #84	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2d8      	uxtb	r0, r3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3354      	adds	r3, #84	; 0x54
 8002070:	4602      	mov	r2, r0
 8002072:	701a      	strb	r2, [r3, #0]
}
 8002074:	e178      	b.n	8002368 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3354      	adds	r3, #84	; 0x54
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3354      	adds	r3, #84	; 0x54
 800209a:	4602      	mov	r2, r0
 800209c:	701a      	strb	r2, [r3, #0]
}
 800209e:	e163      	b.n	8002368 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	f040 80f6 	bne.w	80022a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3361      	adds	r3, #97	; 0x61
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d109      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3360      	adds	r3, #96	; 0x60
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e0c9      	b.n	8002274 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3361      	adds	r3, #97	; 0x61
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d109      	bne.n	8002108 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3360      	adds	r3, #96	; 0x60
 8002102:	2205      	movs	r2, #5
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e0b5      	b.n	8002274 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3361      	adds	r3, #97	; 0x61
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b06      	cmp	r3, #6
 800211a:	d009      	beq.n	8002130 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3361      	adds	r3, #97	; 0x61
 800212a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800212c:	2b08      	cmp	r3, #8
 800212e:	d150      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	335c      	adds	r3, #92	; 0x5c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	202c      	movs	r0, #44	; 0x2c
 8002148:	fb00 f303 	mul.w	r3, r0, r3
 800214c:	440b      	add	r3, r1
 800214e:	335c      	adds	r3, #92	; 0x5c
 8002150:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	335c      	adds	r3, #92	; 0x5c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d912      	bls.n	800218c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3360      	adds	r3, #96	; 0x60
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800218a:	e073      	b.n	8002274 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3360      	adds	r3, #96	; 0x60
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d0:	e050      	b.n	8002274 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d122      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3360      	adds	r3, #96	; 0x60
 80021f4:	2202      	movs	r2, #2
 80021f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800220e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002216:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e023      	b.n	8002274 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3361      	adds	r3, #97	; 0x61
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b07      	cmp	r3, #7
 800223e:	d119      	bne.n	8002274 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	335c      	adds	r3, #92	; 0x5c
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	202c      	movs	r0, #44	; 0x2c
 8002258:	fb00 f303 	mul.w	r3, r0, r3
 800225c:	440b      	add	r3, r1
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3360      	adds	r3, #96	; 0x60
 8002270:	2204      	movs	r2, #4
 8002272:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	2302      	movs	r3, #2
 8002284:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	b2d9      	uxtb	r1, r3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	202c      	movs	r0, #44	; 0x2c
 8002290:	fb00 f303 	mul.w	r3, r0, r3
 8002294:	4413      	add	r3, r2
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f005 fa05 	bl	80076ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022a2:	e061      	b.n	8002368 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d156      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	333f      	adds	r3, #63	; 0x3f
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d111      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 ff39 	bl	8005162 <USB_HC_Halt>
 80022f0:	e031      	b.n	8002356 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	333f      	adds	r3, #63	; 0x3f
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	333f      	adds	r3, #63	; 0x3f
 8002314:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002316:	2b02      	cmp	r3, #2
 8002318:	d11d      	bne.n	8002356 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	335c      	adds	r3, #92	; 0x5c
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d110      	bne.n	8002356 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3361      	adds	r3, #97	; 0x61
 8002342:	2203      	movs	r2, #3
 8002344:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f002 ff06 	bl	8005162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	2310      	movs	r3, #16
 8002366:	6093      	str	r3, [r2, #8]
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11a      	bne.n	80023d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	2304      	movs	r3, #4
 80023b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3361      	adds	r3, #97	; 0x61
 80023c0:	2206      	movs	r2, #6
 80023c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fec7 	bl	8005162 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023d4:	e331      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d12e      	bne.n	800244a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2320      	movs	r3, #32
 80023fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	333d      	adds	r3, #61	; 0x3d
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 8313 	bne.w	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	333d      	adds	r3, #61	; 0x3d
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3360      	adds	r3, #96	; 0x60
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f002 fe8d 	bl	8005162 <USB_HC_Halt>
}
 8002448:	e2f7      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d112      	bne.n	8002488 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002474:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fe6e 	bl	8005162 <USB_HC_Halt>
}
 8002486:	e2d8      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d140      	bne.n	8002520 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	335c      	adds	r3, #92	; 0x5c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	d111      	bne.n	80024ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	333d      	adds	r3, #61	; 0x3d
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2301      	movs	r3, #1
 80024fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3361      	adds	r3, #97	; 0x61
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fe22 	bl	8005162 <USB_HC_Halt>
}
 800251e:	e28c      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d12c      	bne.n	8002590 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3361      	adds	r3, #97	; 0x61
 8002544:	2204      	movs	r2, #4
 8002546:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	333d      	adds	r3, #61	; 0x3d
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	335c      	adds	r3, #92	; 0x5c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fdf3 	bl	8005162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	6093      	str	r3, [r2, #8]
}
 800258e:	e254      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d11a      	bne.n	80025dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	2308      	movs	r3, #8
 80025b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3361      	adds	r3, #97	; 0x61
 80025c6:	2205      	movs	r2, #5
 80025c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fdc4 	bl	8005162 <USB_HC_Halt>
}
 80025da:	e22e      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d140      	bne.n	8002674 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	2203      	movs	r2, #3
 8002614:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	333d      	adds	r3, #61	; 0x3d
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d112      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333c      	adds	r3, #60	; 0x3c
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	333d      	adds	r3, #61	; 0x3d
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fd81 	bl	8005162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	2310      	movs	r3, #16
 8002670:	6093      	str	r3, [r2, #8]
}
 8002672:	e1e2      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d164      	bne.n	8002754 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d111      	bne.n	80026b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3361      	adds	r3, #97	; 0x61
 80026a0:	2206      	movs	r2, #6
 80026a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fd57 	bl	8005162 <USB_HC_Halt>
 80026b4:	e044      	b.n	8002740 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	335c      	adds	r3, #92	; 0x5c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	202c      	movs	r0, #44	; 0x2c
 80026ce:	fb00 f303 	mul.w	r3, r0, r3
 80026d2:	440b      	add	r3, r1
 80026d4:	335c      	adds	r3, #92	; 0x5c
 80026d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d920      	bls.n	800272e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	335c      	adds	r3, #92	; 0x5c
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3360      	adds	r3, #96	; 0x60
 800270c:	2204      	movs	r2, #4
 800270e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	b2d9      	uxtb	r1, r3
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	202c      	movs	r0, #44	; 0x2c
 800271a:	fb00 f303 	mul.w	r3, r0, r3
 800271e:	4413      	add	r3, r2
 8002720:	3360      	adds	r3, #96	; 0x60
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f004 ffc0 	bl	80076ac <HAL_HCD_HC_NotifyURBChange_Callback>
 800272c:	e008      	b.n	8002740 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3360      	adds	r3, #96	; 0x60
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	6093      	str	r3, [r2, #8]
}
 8002752:	e172      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d11b      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	3361      	adds	r3, #97	; 0x61
 800277a:	2208      	movs	r2, #8
 800277c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fcea 	bl	8005162 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a0:	6093      	str	r3, [r2, #8]
}
 80027a2:	e14a      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 813f 	bne.w	8002a3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3361      	adds	r3, #97	; 0x61
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d17d      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3360      	adds	r3, #96	; 0x60
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	333f      	adds	r3, #63	; 0x3f
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d00a      	beq.n	800280c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	333f      	adds	r3, #63	; 0x3f
 8002804:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002806:	2b03      	cmp	r3, #3
 8002808:	f040 8100 	bne.w	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d113      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3355      	adds	r3, #85	; 0x55
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2d8      	uxtb	r0, r3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3355      	adds	r3, #85	; 0x55
 8002838:	4602      	mov	r2, r0
 800283a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80e3 	bne.w	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	334c      	adds	r3, #76	; 0x4c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80d8 	beq.w	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	334c      	adds	r3, #76	; 0x4c
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	202c      	movs	r0, #44	; 0x2c
 8002872:	fb00 f202 	mul.w	r2, r0, r2
 8002876:	440a      	add	r2, r1
 8002878:	3240      	adds	r2, #64	; 0x40
 800287a:	8812      	ldrh	r2, [r2, #0]
 800287c:	4413      	add	r3, r2
 800287e:	3b01      	subs	r3, #1
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	202c      	movs	r0, #44	; 0x2c
 8002886:	fb00 f202 	mul.w	r2, r0, r2
 800288a:	440a      	add	r2, r1
 800288c:	3240      	adds	r2, #64	; 0x40
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	fbb3 f3f2 	udiv	r3, r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b5 	beq.w	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3355      	adds	r3, #85	; 0x55
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2d8      	uxtb	r0, r3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3355      	adds	r3, #85	; 0x55
 80028c6:	4602      	mov	r2, r0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e09f      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3361      	adds	r3, #97	; 0x61
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d109      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3360      	adds	r3, #96	; 0x60
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e08b      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3361      	adds	r3, #97	; 0x61
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d109      	bne.n	800291c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	2202      	movs	r2, #2
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e077      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3361      	adds	r3, #97	; 0x61
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d109      	bne.n	8002944 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3360      	adds	r3, #96	; 0x60
 800293e:	2205      	movs	r2, #5
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e063      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3361      	adds	r3, #97	; 0x61
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b06      	cmp	r3, #6
 8002956:	d009      	beq.n	800296c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3361      	adds	r3, #97	; 0x61
 8002966:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002968:	2b08      	cmp	r3, #8
 800296a:	d14f      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	335c      	adds	r3, #92	; 0x5c
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	202c      	movs	r0, #44	; 0x2c
 8002984:	fb00 f303 	mul.w	r3, r0, r3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	335c      	adds	r3, #92	; 0x5c
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d912      	bls.n	80029c8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3360      	adds	r3, #96	; 0x60
 80029c2:	2204      	movs	r2, #4
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e021      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029f0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	b2d9      	uxtb	r1, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	202c      	movs	r0, #44	; 0x2c
 8002a28:	fb00 f303 	mul.w	r3, r0, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3360      	adds	r3, #96	; 0x60
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f004 fe39 	bl	80076ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a3a:	bf00      	nop
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b08a      	sub	sp, #40	; 0x28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	0c5b      	lsrs	r3, r3, #17
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d004      	beq.n	8002a88 <HCD_RXQLVL_IRQHandler+0x46>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	f000 80a9 	beq.w	8002bd8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a86:	e0aa      	b.n	8002bde <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3344      	adds	r3, #68	; 0x44
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 809b 	beq.w	8002bdc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3350      	adds	r3, #80	; 0x50
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	441a      	add	r2, r3
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	202c      	movs	r0, #44	; 0x2c
 8002ac0:	fb00 f303 	mul.w	r3, r0, r3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	; 0x4c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d87a      	bhi.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3344      	adds	r3, #68	; 0x44
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f001 fe92 	bl	8004810 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3344      	adds	r3, #68	; 0x44
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	441a      	add	r2, r3
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3344      	adds	r3, #68	; 0x44
 8002b0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3350      	adds	r3, #80	; 0x50
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	441a      	add	r2, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	202c      	movs	r0, #44	; 0x2c
 8002b2a:	fb00 f303 	mul.w	r3, r0, r3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3350      	adds	r3, #80	; 0x50
 8002b32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	0cdb      	lsrs	r3, r3, #19
 8002b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3340      	adds	r3, #64	; 0x40
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d13c      	bne.n	8002bdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d039      	beq.n	8002bdc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3354      	adds	r3, #84	; 0x54
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3354      	adds	r3, #84	; 0x54
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	701a      	strb	r2, [r3, #0]
      break;
 8002bc2:	e00b      	b.n	8002bdc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	701a      	strb	r2, [r3, #0]
      break;
 8002bd6:	e001      	b.n	8002bdc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bdc:	bf00      	nop
  }
}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c12:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d10b      	bne.n	8002c36 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f004 fd23 	bl	8007674 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d132      	bne.n	8002ca6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f043 0308 	orr.w	r3, r3, #8
 8002c46:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d126      	bne.n	8002ca0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d113      	bne.n	8002c82 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c64:	d106      	bne.n	8002c74 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 ff3d 	bl	8004aec <USB_InitFSLSPClkSel>
 8002c72:	e011      	b.n	8002c98 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 ff36 	bl	8004aec <USB_InitFSLSPClkSel>
 8002c80:	e00a      	b.n	8002c98 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d106      	bne.n	8002c98 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c90:	461a      	mov	r2, r3
 8002c92:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c96:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f004 fd15 	bl	80076c8 <HAL_HCD_PortEnabled_Callback>
 8002c9e:	e002      	b.n	8002ca6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f004 fd1f 	bl	80076e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d103      	bne.n	8002cb8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f043 0320 	orr.w	r3, r3, #32
 8002cb6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e12b      	b.n	8002f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fd fe52 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d30:	f001 fa20 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a81      	ldr	r2, [pc, #516]	; (8002f40 <HAL_I2C_Init+0x274>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d807      	bhi.n	8002d50 <HAL_I2C_Init+0x84>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a80      	ldr	r2, [pc, #512]	; (8002f44 <HAL_I2C_Init+0x278>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e006      	b.n	8002d5e <HAL_I2C_Init+0x92>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a7d      	ldr	r2, [pc, #500]	; (8002f48 <HAL_I2C_Init+0x27c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0e7      	b.n	8002f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a78      	ldr	r2, [pc, #480]	; (8002f4c <HAL_I2C_Init+0x280>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_I2C_Init+0x274>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d802      	bhi.n	8002da0 <HAL_I2C_Init+0xd4>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	e009      	b.n	8002db4 <HAL_I2C_Init+0xe8>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <HAL_I2C_Init+0x284>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	3301      	adds	r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	495c      	ldr	r1, [pc, #368]	; (8002f40 <HAL_I2C_Init+0x274>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d819      	bhi.n	8002e08 <HAL_I2C_Init+0x13c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e59      	subs	r1, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de8:	400b      	ands	r3, r1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_I2C_Init+0x138>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1e59      	subs	r1, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	e051      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e04:	2304      	movs	r3, #4
 8002e06:	e04f      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <HAL_I2C_Init+0x168>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	440b      	add	r3, r1
 8002e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e012      	b.n	8002e5a <HAL_I2C_Init+0x18e>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Init+0x196>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e022      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10e      	bne.n	8002e88 <HAL_I2C_Init+0x1bc>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1e58      	subs	r0, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	440b      	add	r3, r1
 8002e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e86:	e00f      	b.n	8002ea8 <HAL_I2C_Init+0x1dc>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6809      	ldr	r1, [r1, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6911      	ldr	r1, [r2, #16]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	000186a0 	.word	0x000186a0
 8002f44:	001e847f 	.word	0x001e847f
 8002f48:	003d08ff 	.word	0x003d08ff
 8002f4c:	431bde83 	.word	0x431bde83
 8002f50:	10624dd3 	.word	0x10624dd3

08002f54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e128      	b.n	80031b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a90      	ldr	r2, [pc, #576]	; (80031c0 <HAL_I2S_Init+0x26c>)
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd fd53 	bl	8000a2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f9c:	f023 030f 	bic.w	r3, r3, #15
 8002fa0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d060      	beq.n	8003074 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fba:	2310      	movs	r3, #16
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e001      	b.n	8002fc4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d802      	bhi.n	8002fd2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f001 f9c4 	bl	8004360 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe2:	d125      	bne.n	8003030 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	3305      	adds	r3, #5
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	e01f      	b.n	800304e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	fbb2 f2f3 	udiv	r2, r2, r3
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	3305      	adds	r3, #5
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e00e      	b.n	800304e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fbb2 f2f3 	udiv	r2, r2, r3
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	3305      	adds	r3, #5
 800304c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4a5c      	ldr	r2, [pc, #368]	; (80031c4 <HAL_I2S_Init+0x270>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	08db      	lsrs	r3, r3, #3
 8003058:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e003      	b.n	800307c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003074:	2302      	movs	r3, #2
 8003076:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d902      	bls.n	8003088 <HAL_I2S_Init+0x134>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2bff      	cmp	r3, #255	; 0xff
 8003086:	d907      	bls.n	8003098 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e08f      	b.n	80031b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	ea42 0103 	orr.w	r1, r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030b6:	f023 030f 	bic.w	r3, r3, #15
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6851      	ldr	r1, [r2, #4]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68d2      	ldr	r2, [r2, #12]
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6992      	ldr	r2, [r2, #24]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d161      	bne.n	80031a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <HAL_I2S_Init+0x274>)
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a37      	ldr	r2, [pc, #220]	; (80031cc <HAL_I2S_Init+0x278>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_I2S_Init+0x1a4>
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_I2S_Init+0x27c>)
 80030f6:	e001      	b.n	80030fc <HAL_I2S_Init+0x1a8>
 80030f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	4932      	ldr	r1, [pc, #200]	; (80031cc <HAL_I2S_Init+0x278>)
 8003104:	428a      	cmp	r2, r1
 8003106:	d101      	bne.n	800310c <HAL_I2S_Init+0x1b8>
 8003108:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <HAL_I2S_Init+0x27c>)
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x1bc>
 800310c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003110:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003114:	f023 030f 	bic.w	r3, r3, #15
 8003118:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <HAL_I2S_Init+0x278>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_I2S_Init+0x1d4>
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <HAL_I2S_Init+0x27c>)
 8003126:	e001      	b.n	800312c <HAL_I2S_Init+0x1d8>
 8003128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312c:	2202      	movs	r2, #2
 800312e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <HAL_I2S_Init+0x278>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_I2S_Init+0x1ea>
 800313a:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <HAL_I2S_Init+0x27c>)
 800313c:	e001      	b.n	8003142 <HAL_I2S_Init+0x1ee>
 800313e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314e:	d003      	beq.n	8003158 <HAL_I2S_Init+0x204>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e001      	b.n	8003164 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800316e:	4313      	orrs	r3, r2
 8003170:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003178:	4313      	orrs	r3, r2
 800317a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003182:	4313      	orrs	r3, r2
 8003184:	b29a      	uxth	r2, r3
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	4313      	orrs	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003190:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <HAL_I2S_Init+0x278>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_I2S_Init+0x24c>
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_I2S_Init+0x27c>)
 800319e:	e001      	b.n	80031a4 <HAL_I2S_Init+0x250>
 80031a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a4:	897a      	ldrh	r2, [r7, #10]
 80031a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	080032cb 	.word	0x080032cb
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	080033e1 	.word	0x080033e1
 80031cc:	40003800 	.word	0x40003800
 80031d0:	40003400 	.word	0x40003400

080031d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10e      	bne.n	8003264 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003254:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffb8 	bl	80031d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	b292      	uxth	r2, r2
 8003280:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	1c9a      	adds	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10e      	bne.n	80032c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff93 	bl	80031e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d13a      	bne.n	800335c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d109      	bne.n	8003304 <I2S_IRQHandler+0x3a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d102      	bne.n	8003304 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffb4 	bl	800326c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d126      	bne.n	800335c <I2S_IRQHandler+0x92>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d11f      	bne.n	800335c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800332a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ff50 	bl	80031fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b03      	cmp	r3, #3
 8003366:	d136      	bne.n	80033d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d109      	bne.n	8003386 <I2S_IRQHandler+0xbc>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d102      	bne.n	8003386 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff45 	bl	8003210 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d122      	bne.n	80033d6 <I2S_IRQHandler+0x10c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d11b      	bne.n	80033d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff13 	bl	80031fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a92      	ldr	r2, [pc, #584]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033fa:	4b92      	ldr	r3, [pc, #584]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033fc:	e001      	b.n	8003402 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a8b      	ldr	r2, [pc, #556]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003418:	4b8a      	ldr	r3, [pc, #552]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800341a:	e001      	b.n	8003420 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800341c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342c:	d004      	beq.n	8003438 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 8099 	bne.w	800356a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d107      	bne.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f925 	bl	800369c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f9c8 	bl	80037fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b40      	cmp	r3, #64	; 0x40
 8003474:	d13a      	bne.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d035      	beq.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800348c:	e001      	b.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800348e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4969      	ldr	r1, [pc, #420]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800349a:	428b      	cmp	r3, r1
 800349c:	d101      	bne.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800349e:	4b69      	ldr	r3, [pc, #420]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034a0:	e001      	b.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f043 0202 	orr.w	r2, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fe88 	bl	80031fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	f040 80c3 	bne.w	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80bd 	beq.w	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003512:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a49      	ldr	r2, [pc, #292]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800351e:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003520:	e001      	b.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4944      	ldr	r1, [pc, #272]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352e:	428b      	cmp	r3, r1
 8003530:	d101      	bne.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003532:	4b44      	ldr	r3, [pc, #272]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003534:	e001      	b.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800353e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fe4a 	bl	80031fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003568:	e089      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8be 	bl	8003700 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8fd 	bl	8003798 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d12f      	bne.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02a      	beq.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ce:	e001      	b.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4919      	ldr	r1, [pc, #100]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035dc:	428b      	cmp	r3, r1
 80035de:	d101      	bne.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e2:	e001      	b.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fdfa 	bl	80031fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b08      	cmp	r3, #8
 8003610:	d136      	bne.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d031      	beq.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003628:	e001      	b.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800362a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4902      	ldr	r1, [pc, #8]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003636:	428b      	cmp	r3, r1
 8003638:	d106      	bne.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800363a:	4b02      	ldr	r3, [pc, #8]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800363c:	e006      	b.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800363e:	bf00      	nop
 8003640:	40003800 	.word	0x40003800
 8003644:	40003400 	.word	0x40003400
 8003648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003650:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003660:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0204 	orr.w	r2, r3, #4
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fdc0 	bl	80031fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800367c:	e000      	b.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800367e:	bf00      	nop
}
 8003680:	bf00      	nop
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c99      	adds	r1, r3, #2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6251      	str	r1, [r2, #36]	; 0x24
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d113      	bne.n	80036f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ffc9 	bl	8003688 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c99      	adds	r1, r3, #2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6251      	str	r1, [r2, #36]	; 0x24
 8003712:	8819      	ldrh	r1, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <I2SEx_TxISR_I2SExt+0x90>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <I2SEx_TxISR_I2SExt+0x22>
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <I2SEx_TxISR_I2SExt+0x94>)
 8003720:	e001      	b.n	8003726 <I2SEx_TxISR_I2SExt+0x26>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003726:	460a      	mov	r2, r1
 8003728:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d121      	bne.n	8003786 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a12      	ldr	r2, [pc, #72]	; (8003790 <I2SEx_TxISR_I2SExt+0x90>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <I2SEx_TxISR_I2SExt+0x50>
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <I2SEx_TxISR_I2SExt+0x94>)
 800374e:	e001      	b.n	8003754 <I2SEx_TxISR_I2SExt+0x54>
 8003750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	490d      	ldr	r1, [pc, #52]	; (8003790 <I2SEx_TxISR_I2SExt+0x90>)
 800375c:	428b      	cmp	r3, r1
 800375e:	d101      	bne.n	8003764 <I2SEx_TxISR_I2SExt+0x64>
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <I2SEx_TxISR_I2SExt+0x94>)
 8003762:	e001      	b.n	8003768 <I2SEx_TxISR_I2SExt+0x68>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800376c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff81 	bl	8003688 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40003800 	.word	0x40003800
 8003794:	40003400 	.word	0x40003400

08003798 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68d8      	ldr	r0, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	1c99      	adds	r1, r3, #2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037b0:	b282      	uxth	r2, r0
 80037b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d113      	bne.n	80037f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff4a 	bl	8003688 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <I2SEx_RxISR_I2SExt+0x90>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <I2SEx_RxISR_I2SExt+0x16>
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <I2SEx_RxISR_I2SExt+0x94>)
 8003810:	e001      	b.n	8003816 <I2SEx_RxISR_I2SExt+0x1a>
 8003812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003816:	68d8      	ldr	r0, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	1c99      	adds	r1, r3, #2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003822:	b282      	uxth	r2, r0
 8003824:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d121      	bne.n	8003882 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <I2SEx_RxISR_I2SExt+0x90>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <I2SEx_RxISR_I2SExt+0x50>
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <I2SEx_RxISR_I2SExt+0x94>)
 800384a:	e001      	b.n	8003850 <I2SEx_RxISR_I2SExt+0x54>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	490d      	ldr	r1, [pc, #52]	; (800388c <I2SEx_RxISR_I2SExt+0x90>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d101      	bne.n	8003860 <I2SEx_RxISR_I2SExt+0x64>
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <I2SEx_RxISR_I2SExt+0x94>)
 800385e:	e001      	b.n	8003864 <I2SEx_RxISR_I2SExt+0x68>
 8003860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003864:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003868:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff03 	bl	8003688 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40003800 	.word	0x40003800
 8003890:	40003400 	.word	0x40003400

08003894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e267      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d075      	beq.n	800399e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038b2:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b85      	ldr	r3, [pc, #532]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d112      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b82      	ldr	r3, [pc, #520]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	4b7e      	ldr	r3, [pc, #504]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <HAL_RCC_OscConfig+0x108>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d157      	bne.n	800399c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e242      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x74>
 80038fa:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a75      	ldr	r2, [pc, #468]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e01d      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x98>
 8003912:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6f      	ldr	r2, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b6d      	ldr	r3, [pc, #436]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6c      	ldr	r2, [pc, #432]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 800392c:	4b69      	ldr	r3, [pc, #420]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd faa2 	bl	8000e94 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003954:	f7fd fa9e 	bl	8000e94 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e207      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b5b      	ldr	r3, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xc0>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd fa8e 	bl	8000e94 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd fa8a 	bl	8000e94 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1f3      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	4b51      	ldr	r3, [pc, #324]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0xe8>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039aa:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11c      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1c7      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	e03a      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fa43 	bl	8000e94 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fd fa3f 	bl	8000e94 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1a8      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4925      	ldr	r1, [pc, #148]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCC_OscConfig+0x244>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fa22 	bl	8000e94 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fd fa1e 	bl	8000e94 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e187      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d036      	beq.n	8003aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_RCC_OscConfig+0x248>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fa02 	bl	8000e94 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fd f9fe 	bl	8000e94 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e167      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x200>
 8003ab2:	e01b      	b.n	8003aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_OscConfig+0x248>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fd f9eb 	bl	8000e94 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e00e      	b.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fd f9e7 	bl	8000e94 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d907      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e150      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	42470000 	.word	0x42470000
 8003adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ea      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8097 	beq.w	8003c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b81      	ldr	r3, [pc, #516]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b7d      	ldr	r3, [pc, #500]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a7c      	ldr	r2, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b77      	ldr	r3, [pc, #476]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b36:	4b74      	ldr	r3, [pc, #464]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a73      	ldr	r2, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fd f9a7 	bl	8000e94 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fd f9a3 	bl	8000e94 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e10c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x474>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2ea>
 8003b70:	4b64      	ldr	r3, [pc, #400]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a63      	ldr	r2, [pc, #396]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	e01c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x30c>
 8003b86:	4b5f      	ldr	r3, [pc, #380]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4b5c      	ldr	r3, [pc, #368]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a5b      	ldr	r2, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x324>
 8003ba0:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bac:	4b55      	ldr	r3, [pc, #340]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a54      	ldr	r2, [pc, #336]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc0:	f7fd f968 	bl	8000e94 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fd f964 	bl	8000e94 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0cb      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ee      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x334>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fd f952 	bl	8000e94 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fd f94e 	bl	8000e94 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0b5      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80a1 	beq.w	8003d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c32:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d05c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d141      	bne.n	8003cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd f922 	bl	8000e94 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd f91e 	bl	8000e94 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e087      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	491b      	ldr	r1, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fd f8f7 	bl	8000e94 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fd f8f3 	bl	8000e94 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e05c      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x416>
 8003cc8:	e054      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCC_OscConfig+0x478>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f8e0 	bl	8000e94 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd f8dc 	bl	8000e94 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e045      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_OscConfig+0x470>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x444>
 8003cf6:	e03d      	b.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e038      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x4ec>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d121      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11a      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cc      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d90c      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a58      	ldr	r2, [pc, #352]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	494d      	ldr	r1, [pc, #308]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d044      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d119      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e067      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4934      	ldr	r1, [pc, #208]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fd f80e 	bl	8000e94 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fd f80a 	bl	8000e94 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d20c      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e032      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4916      	ldr	r1, [pc, #88]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	490e      	ldr	r1, [pc, #56]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f0a:	f000 f821 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	490a      	ldr	r1, [pc, #40]	; (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	5ccb      	ldrb	r3, [r1, r3]
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc ff6e 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023c00 	.word	0x40023c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	08007d9c 	.word	0x08007d9c
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	20000004 	.word	0x20000004

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f54:	b094      	sub	sp, #80	; 0x50
 8003f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f60:	2300      	movs	r3, #0
 8003f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f68:	4b79      	ldr	r3, [pc, #484]	; (8004150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x40>
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	f200 80e1 	bhi.w	800413c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f82:	e0db      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4b73      	ldr	r3, [pc, #460]	; (8004154 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f88:	e0db      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8a:	4b73      	ldr	r3, [pc, #460]	; (8004158 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8e:	e0d8      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f90:	4b6f      	ldr	r3, [pc, #444]	; (8004150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9a:	4b6d      	ldr	r3, [pc, #436]	; (8004150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d063      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa6:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	2200      	movs	r2, #0
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fba:	2300      	movs	r3, #0
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	f04f 0000 	mov.w	r0, #0
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	0159      	lsls	r1, r3, #5
 8003fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd4:	0150      	lsls	r0, r2, #5
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4621      	mov	r1, r4
 8003fdc:	1a51      	subs	r1, r2, r1
 8003fde:	6139      	str	r1, [r7, #16]
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	018b      	lsls	r3, r1, #6
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffe:	4651      	mov	r1, sl
 8004000:	018a      	lsls	r2, r1, #6
 8004002:	4651      	mov	r1, sl
 8004004:	ebb2 0801 	subs.w	r8, r2, r1
 8004008:	4659      	mov	r1, fp
 800400a:	eb63 0901 	sbc.w	r9, r3, r1
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800401a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004022:	4690      	mov	r8, r2
 8004024:	4699      	mov	r9, r3
 8004026:	4623      	mov	r3, r4
 8004028:	eb18 0303 	adds.w	r3, r8, r3
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	462b      	mov	r3, r5
 8004030:	eb49 0303 	adc.w	r3, r9, r3
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004042:	4629      	mov	r1, r5
 8004044:	024b      	lsls	r3, r1, #9
 8004046:	4621      	mov	r1, r4
 8004048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800404c:	4621      	mov	r1, r4
 800404e:	024a      	lsls	r2, r1, #9
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004056:	2200      	movs	r2, #0
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
 800405a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800405c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004060:	f7fc f8b2 	bl	80001c8 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4613      	mov	r3, r2
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	e058      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_RCC_GetSysClockFreq+0x200>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	2200      	movs	r2, #0
 8004076:	4618      	mov	r0, r3
 8004078:	4611      	mov	r1, r2
 800407a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	2300      	movs	r3, #0
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	f04f 0000 	mov.w	r0, #0
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	0159      	lsls	r1, r3, #5
 8004096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409a:	0150      	lsls	r0, r2, #5
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4641      	mov	r1, r8
 80040a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040a6:	4649      	mov	r1, r9
 80040a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040c0:	ebb2 040a 	subs.w	r4, r2, sl
 80040c4:	eb63 050b 	sbc.w	r5, r3, fp
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	00eb      	lsls	r3, r5, #3
 80040d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d6:	00e2      	lsls	r2, r4, #3
 80040d8:	4614      	mov	r4, r2
 80040da:	461d      	mov	r5, r3
 80040dc:	4643      	mov	r3, r8
 80040de:	18e3      	adds	r3, r4, r3
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	464b      	mov	r3, r9
 80040e4:	eb45 0303 	adc.w	r3, r5, r3
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f6:	4629      	mov	r1, r5
 80040f8:	028b      	lsls	r3, r1, #10
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004100:	4621      	mov	r1, r4
 8004102:	028a      	lsls	r2, r1, #10
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410a:	2200      	movs	r2, #0
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	61fa      	str	r2, [r7, #28]
 8004110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004114:	f7fc f858 	bl	80001c8 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_GetSysClockFreq+0x200>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetSysClockFreq+0x204>)
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004144:	4618      	mov	r0, r3
 8004146:	3750      	adds	r7, #80	; 0x50
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200

0800415c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08007dac 	.word	0x08007dac

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d035      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041c4:	4b62      	ldr	r3, [pc, #392]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ca:	f7fc fe63 	bl	8000e94 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041d2:	f7fc fe5f 	bl	8000e94 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0b0      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e4:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	019a      	lsls	r2, r3, #6
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	071b      	lsls	r3, r3, #28
 80041fc:	4955      	ldr	r1, [pc, #340]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004204:	4b52      	ldr	r3, [pc, #328]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420a:	f7fc fe43 	bl	8000e94 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004212:	f7fc fe3f 	bl	8000e94 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e090      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004224:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8083 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	4b44      	ldr	r3, [pc, #272]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	4a43      	ldr	r2, [pc, #268]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800425a:	4b3f      	ldr	r3, [pc, #252]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3e      	ldr	r2, [pc, #248]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004266:	f7fc fe15 	bl	8000e94 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fc fe11 	bl	8000e94 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e062      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004294:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d028      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ba:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042c6:	4b23      	ldr	r3, [pc, #140]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d114      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fc fddf 	bl	8000e94 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fc fddb 	bl	8000e94 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e02a      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ee      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004308:	d10d      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	490d      	ldr	r1, [pc, #52]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004330:	6093      	str	r3, [r2, #8]
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	4905      	ldr	r1, [pc, #20]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	42470068 	.word	0x42470068
 8004354:	40023800 	.word	0x40023800
 8004358:	40007000 	.word	0x40007000
 800435c:	42470e40 	.word	0x42470e40

08004360 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d13e      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d12f      	bne.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004394:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004396:	617b      	str	r3, [r7, #20]
          break;
 8004398:	e02f      	b.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a6:	d108      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e007      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e4:	0f1b      	lsrs	r3, r3, #28
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]
          break;
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
          break;
 80043f8:	bf00      	nop
        }
      }
      break;
 80043fa:	bf00      	nop
    }
  }
  return frequency;
 80043fc:	697b      	ldr	r3, [r7, #20]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	00bb8000 	.word	0x00bb8000
 8004414:	007a1200 	.word	0x007a1200
 8004418:	00f42400 	.word	0x00f42400

0800441c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e07b      	b.n	8004526 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d108      	bne.n	8004448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443e:	d009      	beq.n	8004454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	61da      	str	r2, [r3, #28]
 8004446:	e005      	b.n	8004454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fb5c 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	ea42 0103 	orr.w	r1, r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	f003 0104 	and.w	r1, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0210 	and.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800452e:	b084      	sub	sp, #16
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	f107 001c 	add.w	r0, r7, #28
 800453c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2b01      	cmp	r3, #1
 8004544:	d122      	bne.n	800458c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f9bf 	bl	8004904 <USB_CoreReset>
 8004586:	4603      	mov	r3, r0
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	e01a      	b.n	80045c2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f9b3 	bl	8004904 <USB_CoreReset>
 800459e:	4603      	mov	r3, r0
 80045a0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
 80045b4:	e005      	b.n	80045c2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d10b      	bne.n	80045e0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f043 0206 	orr.w	r2, r3, #6
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f043 0220 	orr.w	r2, r3, #32
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ec:	b004      	add	sp, #16
 80045ee:	4770      	bx	lr

080045f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f043 0201 	orr.w	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d115      	bne.n	8004682 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004662:	2001      	movs	r0, #1
 8004664:	f7fc fc22 	bl	8000eac <HAL_Delay>
      ms++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f939 	bl	80048e6 <USB_GetMode>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d01e      	beq.n	80046b8 <USB_SetCurrentMode+0x84>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b31      	cmp	r3, #49	; 0x31
 800467e:	d9f0      	bls.n	8004662 <USB_SetCurrentMode+0x2e>
 8004680:	e01a      	b.n	80046b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d115      	bne.n	80046b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004694:	2001      	movs	r0, #1
 8004696:	f7fc fc09 	bl	8000eac <HAL_Delay>
      ms++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f920 	bl	80048e6 <USB_GetMode>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <USB_SetCurrentMode+0x84>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b31      	cmp	r3, #49	; 0x31
 80046b0:	d9f0      	bls.n	8004694 <USB_SetCurrentMode+0x60>
 80046b2:	e001      	b.n	80046b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e005      	b.n	80046c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b32      	cmp	r3, #50	; 0x32
 80046bc:	d101      	bne.n	80046c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a13      	ldr	r2, [pc, #76]	; (8004730 <USB_FlushTxFifo+0x64>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e01b      	b.n	8004724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	daf2      	bge.n	80046da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	019b      	lsls	r3, r3, #6
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a08      	ldr	r2, [pc, #32]	; (8004730 <USB_FlushTxFifo+0x64>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e006      	b.n	8004724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d0f0      	beq.n	8004704 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	00030d40 	.word	0x00030d40

08004734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a11      	ldr	r2, [pc, #68]	; (8004790 <USB_FlushRxFifo+0x5c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e018      	b.n	8004784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	daf2      	bge.n	8004740 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2210      	movs	r2, #16
 8004762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a08      	ldr	r2, [pc, #32]	; (8004790 <USB_FlushRxFifo+0x5c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e006      	b.n	8004784 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b10      	cmp	r3, #16
 8004780:	d0f0      	beq.n	8004764 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	460b      	mov	r3, r1
 80047a4:	71fb      	strb	r3, [r7, #7]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d123      	bne.n	8004802 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ba:	88bb      	ldrh	r3, [r7, #4]
 80047bc:	3303      	adds	r3, #3
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e018      	b.n	80047fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	031a      	lsls	r2, r3, #12
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	461a      	mov	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3e2      	bcc.n	80047c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3724      	adds	r7, #36	; 0x24
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004810:	b480      	push	{r7}
 8004812:	b08b      	sub	sp, #44	; 0x2c
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	089b      	lsrs	r3, r3, #2
 800482a:	b29b      	uxth	r3, r3
 800482c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004836:	2300      	movs	r3, #0
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	e014      	b.n	8004866 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	601a      	str	r2, [r3, #0]
    pDest++;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	3301      	adds	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	3301      	adds	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	3301      	adds	r3, #1
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	3301      	adds	r3, #1
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	3301      	adds	r3, #1
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	429a      	cmp	r2, r3
 800486c:	d3e6      	bcc.n	800483c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800486e:	8bfb      	ldrh	r3, [r7, #30]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01e      	beq.n	80048b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	461a      	mov	r2, r3
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	b2da      	uxtb	r2, r3
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	701a      	strb	r2, [r3, #0]
      i++;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	3301      	adds	r3, #1
 800489e:	623b      	str	r3, [r7, #32]
      pDest++;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	3301      	adds	r3, #1
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048a6:	8bfb      	ldrh	r3, [r7, #30]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048ac:	8bfb      	ldrh	r3, [r7, #30]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ea      	bne.n	8004888 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	372c      	adds	r7, #44	; 0x2c
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0301 	and.w	r3, r3, #1
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <USB_CoreReset+0x64>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e01b      	b.n	800495a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	daf2      	bge.n	8004910 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <USB_CoreReset+0x64>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e006      	b.n	800495a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d0f0      	beq.n	800493a <USB_CoreReset+0x36>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800496c:	b084      	sub	sp, #16
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800497a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800498c:	461a      	mov	r2, r3
 800498e:	2300      	movs	r3, #0
 8004990:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10a      	bne.n	80049de <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e014      	b.n	8004a08 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ec:	f023 0304 	bic.w	r3, r3, #4
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e009      	b.n	8004a08 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a02:	f023 0304 	bic.w	r3, r3, #4
 8004a06:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a08:	2110      	movs	r1, #16
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fe5e 	bl	80046cc <USB_FlushTxFifo>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fe8a 	bl	8004734 <USB_FlushRxFifo>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	e015      	b.n	8004a5c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3e5      	bcc.n	8004a30 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a70:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <USB_HostInit+0x16c>)
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <USB_HostInit+0x170>)
 8004a90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a94:	e009      	b.n	8004aaa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <USB_HostInit+0x174>)
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a0f      	ldr	r2, [pc, #60]	; (8004ae4 <USB_HostInit+0x178>)
 8004aa6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f043 0210 	orr.w	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <USB_HostInit+0x17c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ad4:	b004      	add	sp, #16
 8004ad6:	4770      	bx	lr
 8004ad8:	01000200 	.word	0x01000200
 8004adc:	00e00300 	.word	0x00e00300
 8004ae0:	00600080 	.word	0x00600080
 8004ae4:	004000e0 	.word	0x004000e0
 8004ae8:	a3200008 	.word	0xa3200008

08004aec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b34:	461a      	mov	r2, r3
 8004b36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b3a:	6053      	str	r3, [r2, #4]
 8004b3c:	e009      	b.n	8004b52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d106      	bne.n	8004b52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b90:	2064      	movs	r0, #100	; 0x64
 8004b92:	f7fc f98b 	bl	8000eac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	f7fc f981 	bl	8000eac <HAL_Delay>

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <USB_DriveVbus+0x44>
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d106      	bne.n	8004bf8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bf6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d109      	bne.n	8004c18 <USB_DriveVbus+0x64>
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	0c5b      	lsrs	r3, r3, #17
 8004c44:	f003 0303 	and.w	r3, r3, #3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	b29b      	uxth	r3, r3
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	70fb      	strb	r3, [r7, #3]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	70bb      	strb	r3, [r7, #2]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d87e      	bhi.n	8004db4 <USB_HC_Init+0x13c>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <USB_HC_Init+0x44>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004d77 	.word	0x08004d77
 8004cc4:	08004ccd 	.word	0x08004ccd
 8004cc8:	08004d39 	.word	0x08004d39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f240 439d 	movw	r3, #1181	; 0x49d
 8004cde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004ce0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da10      	bge.n	8004d0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d08:	e057      	b.n	8004dba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d051      	beq.n	8004dba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d34:	60d3      	str	r3, [r2, #12]
      break;
 8004d36:	e040      	b.n	8004dba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da34      	bge.n	8004dbe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d74:	e023      	b.n	8004dbe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	461a      	mov	r2, r3
 8004d84:	f240 2325 	movw	r3, #549	; 0x225
 8004d88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da17      	bge.n	8004dc2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004db0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004db2:	e006      	b.n	8004dc2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77fb      	strb	r3, [r7, #31]
      break;
 8004db8:	e004      	b.n	8004dc4 <USB_HC_Init+0x14c>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e002      	b.n	8004dc4 <USB_HC_Init+0x14c>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <USB_HC_Init+0x14c>
      break;
 8004dc2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dde:	f043 0302 	orr.w	r3, r3, #2
 8004de2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	2101      	movs	r1, #1
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	6939      	ldr	r1, [r7, #16]
 8004dfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da03      	bge.n	8004e1e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e001      	b.n	8004e22 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff feff 	bl	8004c26 <USB_GetHostSpeed>
 8004e28:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d106      	bne.n	8004e40 <USB_HC_Init+0x1c8>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d003      	beq.n	8004e40 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e001      	b.n	8004e44 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e44:	787b      	ldrb	r3, [r7, #1]
 8004e46:	059b      	lsls	r3, r3, #22
 8004e48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e4c:	78bb      	ldrb	r3, [r7, #2]
 8004e4e:	02db      	lsls	r3, r3, #11
 8004e50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e54:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e5a:	049b      	lsls	r3, r3, #18
 8004e5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e80:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d003      	beq.n	8004e92 <USB_HC_Init+0x21a>
 8004e8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10f      	bne.n	8004eb2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	; 0x30
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02d      	beq.n	8004f42 <USB_HC_StartXfer+0x86>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d129      	bne.n	8004f42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d117      	bne.n	8004f24 <USB_HC_StartXfer+0x68>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	79db      	ldrb	r3, [r3, #7]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <USB_HC_StartXfer+0x48>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	79db      	ldrb	r3, [r3, #7]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d10f      	bne.n	8004f24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <USB_HC_StartXfer+0x86>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	795b      	ldrb	r3, [r3, #5]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d107      	bne.n	8004f42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	4619      	mov	r1, r3
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fa0f 	bl	800535c <USB_DoPing>
      return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e0f8      	b.n	8005134 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	8912      	ldrh	r2, [r2, #8]
 8004f52:	4413      	add	r3, r2
 8004f54:	3b01      	subs	r3, #1
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	8912      	ldrh	r2, [r2, #8]
 8004f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f62:	8b7b      	ldrh	r3, [r7, #26]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d90b      	bls.n	8004f80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004f68:	8b7b      	ldrh	r3, [r7, #26]
 8004f6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	8912      	ldrh	r2, [r2, #8]
 8004f72:	fb03 f202 	mul.w	r2, r3, r2
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e001      	b.n	8004f80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	8912      	ldrh	r2, [r2, #8]
 8004f8e:	fb03 f202 	mul.w	r2, r3, r2
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	611a      	str	r2, [r3, #16]
 8004f96:	e003      	b.n	8004fa0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004faa:	04d9      	lsls	r1, r3, #19
 8004fac:	4b63      	ldr	r3, [pc, #396]	; (800513c <USB_HC_StartXfer+0x280>)
 8004fae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	7a9b      	ldrb	r3, [r3, #10]
 8004fb6:	075b      	lsls	r3, r3, #29
 8004fb8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fbc:	69f9      	ldr	r1, [r7, #28]
 8004fbe:	0148      	lsls	r0, r1, #5
 8004fc0:	6a39      	ldr	r1, [r7, #32]
 8004fc2:	4401      	add	r1, r0
 8004fc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fc8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68d9      	ldr	r1, [r3, #12]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	440a      	add	r2, r1
 8005014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005018:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800501c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	7e7b      	ldrb	r3, [r7, #25]
 800502e:	075b      	lsls	r3, r3, #29
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	0148      	lsls	r0, r1, #5
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	4401      	add	r1, r0
 8005038:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	4413      	add	r3, r2
 8005048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005056:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	78db      	ldrb	r3, [r3, #3]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	e003      	b.n	8005072 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005070:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005078:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005086:	461a      	mov	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e04e      	b.n	8005134 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d149      	bne.n	8005132 <USB_HC_StartXfer+0x276>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d045      	beq.n	8005132 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	79db      	ldrb	r3, [r3, #7]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d830      	bhi.n	8005110 <USB_HC_StartXfer+0x254>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <USB_HC_StartXfer+0x1f8>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	080050c5 	.word	0x080050c5
 80050c0:	080050e9 	.word	0x080050e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	3303      	adds	r3, #3
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050ce:	8afa      	ldrh	r2, [r7, #22]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d91c      	bls.n	8005114 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80050e6:	e015      	b.n	8005114 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	3303      	adds	r3, #3
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80050f2:	8afa      	ldrh	r2, [r7, #22]
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	429a      	cmp	r2, r3
 8005100:	d90a      	bls.n	8005118 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]
        }
        break;
 800510e:	e003      	b.n	8005118 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005110:	bf00      	nop
 8005112:	e002      	b.n	800511a <USB_HC_StartXfer+0x25e>
        break;
 8005114:	bf00      	nop
 8005116:	e000      	b.n	800511a <USB_HC_StartXfer+0x25e>
        break;
 8005118:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68d9      	ldr	r1, [r3, #12]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	785a      	ldrb	r2, [r3, #1]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	b29b      	uxth	r3, r3
 8005128:	2000      	movs	r0, #0
 800512a:	9000      	str	r0, [sp, #0]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fb31 	bl	8004794 <USB_WritePacket>
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3728      	adds	r7, #40	; 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	1ff80000 	.word	0x1ff80000

08005140 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	b29b      	uxth	r3, r3
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005162:	b480      	push	{r7}
 8005164:	b089      	sub	sp, #36	; 0x24
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	0c9b      	lsrs	r3, r3, #18
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	0fdb      	lsrs	r3, r3, #31
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d104      	bne.n	80051bc <USB_HC_Halt+0x5a>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e0c8      	b.n	800534e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <USB_HC_Halt+0x66>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d163      	bne.n	8005290 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 80ab 	bne.w	800534c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d133      	bne.n	800526a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005220:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	440a      	add	r2, r1
 8005238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005240:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800524e:	d81d      	bhi.n	800528c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005266:	d0ec      	beq.n	8005242 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005268:	e070      	b.n	800534c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005288:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800528a:	e05f      	b.n	800534c <USB_HC_Halt+0x1ea>
            break;
 800528c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800528e:	e05d      	b.n	800534c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d133      	bne.n	8005328 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530c:	d81d      	bhi.n	800534a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005324:	d0ec      	beq.n	8005300 <USB_HC_Halt+0x19e>
 8005326:	e011      	b.n	800534c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	440a      	add	r2, r1
 800533e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e000      	b.n	800534c <USB_HC_Halt+0x1ea>
          break;
 800534a:	bf00      	nop
    }
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3724      	adds	r7, #36	; 0x24
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005370:	2301      	movs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	04da      	lsls	r2, r3, #19
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <USB_DoPing+0x74>)
 800537a:	4013      	ands	r3, r2
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800538c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	1ff80000 	.word	0x1ff80000

080053d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff f912 	bl	8004612 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ee:	2110      	movs	r1, #16
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff f96b 	bl	80046cc <USB_FlushTxFifo>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff f997 	bl	8004734 <USB_FlushRxFifo>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e01f      	b.n	8005456 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800542c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005434:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800543c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	3301      	adds	r3, #1
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d9dc      	bls.n	8005416 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800545c:	2300      	movs	r3, #0
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	e034      	b.n	80054cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4413      	add	r3, r2
 800546a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005478:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005480:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005488:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	461a      	mov	r2, r3
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a8:	d80c      	bhi.n	80054c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c0:	d0ec      	beq.n	800549c <USB_StopHost+0xc8>
 80054c2:	e000      	b.n	80054c6 <USB_StopHost+0xf2>
        break;
 80054c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	3301      	adds	r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	d9c7      	bls.n	8005462 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d8:	461a      	mov	r2, r3
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295
 80054e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff f881 	bl	80045f0 <USB_EnableGlobalInt>

  return ret;
 80054ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b089      	sub	sp, #36	; 0x24
 80054fc:	af04      	add	r7, sp, #16
 80054fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005500:	2301      	movs	r3, #1
 8005502:	2202      	movs	r2, #2
 8005504:	2102      	movs	r1, #2
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fc66 	bl	8005dd8 <USBH_FindInterface>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2bff      	cmp	r3, #255	; 0xff
 8005514:	d002      	beq.n	800551c <USBH_CDC_InterfaceInit+0x24>
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d901      	bls.n	8005520 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800551c:	2302      	movs	r3, #2
 800551e:	e13d      	b.n	800579c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fc3b 	bl	8005da0 <USBH_SelectInterface>
 800552a:	4603      	mov	r3, r0
 800552c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800552e:	7bbb      	ldrb	r3, [r7, #14]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005534:	2302      	movs	r3, #2
 8005536:	e131      	b.n	800579c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800553e:	2050      	movs	r0, #80	; 0x50
 8005540:	f002 fad2 	bl	8007ae8 <malloc>
 8005544:	4603      	mov	r3, r0
 8005546:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005558:	2302      	movs	r3, #2
 800555a:	e11f      	b.n	800579c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800555c:	2250      	movs	r2, #80	; 0x50
 800555e:	2100      	movs	r1, #0
 8005560:	68b8      	ldr	r0, [r7, #8]
 8005562:	f002 fb7d 	bl	8007c60 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	211a      	movs	r1, #26
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	4413      	add	r3, r2
 8005572:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b25b      	sxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	da15      	bge.n	80055aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	211a      	movs	r1, #26
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800558e:	781a      	ldrb	r2, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	211a      	movs	r1, #26
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 ff2e 	bl	8007412 <USBH_AllocPipe>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	7858      	ldrb	r0, [r3, #1]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	8952      	ldrh	r2, [r2, #10]
 80055d6:	9202      	str	r2, [sp, #8]
 80055d8:	2203      	movs	r2, #3
 80055da:	9201      	str	r2, [sp, #4]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4623      	mov	r3, r4
 80055e0:	4602      	mov	r2, r0
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 fee6 	bl	80073b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2200      	movs	r2, #0
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f002 f9f5 	bl	80079e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80055f6:	2300      	movs	r3, #0
 80055f8:	2200      	movs	r2, #0
 80055fa:	210a      	movs	r1, #10
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fbeb 	bl	8005dd8 <USBH_FindInterface>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2bff      	cmp	r3, #255	; 0xff
 800560a:	d002      	beq.n	8005612 <USBH_CDC_InterfaceInit+0x11a>
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d901      	bls.n	8005616 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005612:	2302      	movs	r3, #2
 8005614:	e0c2      	b.n	800579c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	211a      	movs	r1, #26
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b25b      	sxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	da16      	bge.n	800565c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	211a      	movs	r1, #26
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	211a      	movs	r1, #26
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	4413      	add	r3, r2
 8005650:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	835a      	strh	r2, [r3, #26]
 800565a:	e015      	b.n	8005688 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	211a      	movs	r1, #26
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	211a      	movs	r1, #26
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	4413      	add	r3, r2
 800567e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005682:	881a      	ldrh	r2, [r3, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	211a      	movs	r1, #26
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4413      	add	r3, r2
 8005694:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b25b      	sxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	da16      	bge.n	80056ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	211a      	movs	r1, #26
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	211a      	movs	r1, #26
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	835a      	strh	r2, [r3, #26]
 80056cc:	e015      	b.n	80056fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	211a      	movs	r1, #26
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	211a      	movs	r1, #26
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	7b9b      	ldrb	r3, [r3, #14]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fe86 	bl	8007412 <USBH_AllocPipe>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	7bdb      	ldrb	r3, [r3, #15]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fe7c 	bl	8007412 <USBH_AllocPipe>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	7b59      	ldrb	r1, [r3, #13]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	7b98      	ldrb	r0, [r3, #14]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	8b12      	ldrh	r2, [r2, #24]
 800573a:	9202      	str	r2, [sp, #8]
 800573c:	2202      	movs	r2, #2
 800573e:	9201      	str	r2, [sp, #4]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4623      	mov	r3, r4
 8005744:	4602      	mov	r2, r0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 fe34 	bl	80073b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	7b19      	ldrb	r1, [r3, #12]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	7bd8      	ldrb	r0, [r3, #15]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	8b52      	ldrh	r2, [r2, #26]
 8005764:	9202      	str	r2, [sp, #8]
 8005766:	2202      	movs	r2, #2
 8005768:	9201      	str	r2, [sp, #4]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4623      	mov	r3, r4
 800576e:	4602      	mov	r2, r0
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fe1f 	bl	80073b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	7b5b      	ldrb	r3, [r3, #13]
 8005782:	2200      	movs	r2, #0
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 f92a 	bl	80079e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	7b1b      	ldrb	r3, [r3, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f002 f923 	bl	80079e0 <USBH_LL_SetToggle>

  return USBH_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd90      	pop	{r4, r7, pc}

080057a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00e      	beq.n	80057dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fe14 	bl	80073f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 fe3f 	bl	8007454 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	7b1b      	ldrb	r3, [r3, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fe01 	bl	80073f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	7b1b      	ldrb	r3, [r3, #12]
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fe2c 	bl	8007454 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7b5b      	ldrb	r3, [r3, #13]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	7b5b      	ldrb	r3, [r3, #13]
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fdee 	bl	80073f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	7b5b      	ldrb	r3, [r3, #13]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fe19 	bl	8007454 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	4618      	mov	r0, r3
 800583e:	f002 f95b 	bl	8007af8 <free>
    phost->pActiveClass->pData = 0U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005848:	2200      	movs	r2, #0
 800584a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3340      	adds	r3, #64	; 0x40
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8b1 	bl	80059d6 <GetLineCoding>
 8005874:	4603      	mov	r3, r0
 8005876:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005878:	7afb      	ldrb	r3, [r7, #11]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005884:	2102      	movs	r1, #2
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800588a:	7afb      	ldrb	r3, [r7, #11]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d877      	bhi.n	80059a8 <USBH_CDC_Process+0x114>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <USBH_CDC_Process+0x2c>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058d5 	.word	0x080058d5
 80058c4:	080058db 	.word	0x080058db
 80058c8:	0800590b 	.word	0x0800590b
 80058cc:	0800597f 	.word	0x0800597f
 80058d0:	0800598d 	.word	0x0800598d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	e06d      	b.n	80059b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f897 	bl	8005a14 <SetLineCoding>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058f8:	e058      	b.n	80059ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d055      	beq.n	80059ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2204      	movs	r2, #4
 8005904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005908:	e050      	b.n	80059ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3340      	adds	r3, #64	; 0x40
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f860 	bl	80059d6 <GetLineCoding>
 8005916:	4603      	mov	r3, r0
 8005918:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d126      	bne.n	800596e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d13b      	bne.n	80059b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005942:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005944:	429a      	cmp	r2, r3
 8005946:	d133      	bne.n	80059b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005954:	429a      	cmp	r2, r3
 8005956:	d12b      	bne.n	80059b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005960:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005962:	429a      	cmp	r2, r3
 8005964:	d124      	bne.n	80059b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f958 	bl	8005c1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800596c:	e020      	b.n	80059b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d01d      	beq.n	80059b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2204      	movs	r2, #4
 8005978:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800597c:	e018      	b.n	80059b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f867 	bl	8005a52 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8da 	bl	8005b3e <CDC_ProcessReception>
      break;
 800598a:	e014      	b.n	80059b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800598c:	2100      	movs	r1, #0
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 ffef 	bl	8006972 <USBH_ClrFeature>
 8005994:	4603      	mov	r3, r0
 8005996:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005998:	7bbb      	ldrb	r3, [r7, #14]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80059a6:	e005      	b.n	80059b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80059a8:	bf00      	nop
 80059aa:	e004      	b.n	80059b6 <USBH_CDC_Process+0x122>
      break;
 80059ac:	bf00      	nop
 80059ae:	e002      	b.n	80059b6 <USBH_CDC_Process+0x122>
      break;
 80059b0:	bf00      	nop
 80059b2:	e000      	b.n	80059b6 <USBH_CDC_Process+0x122>
      break;
 80059b4:	bf00      	nop

  }

  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	22a1      	movs	r2, #161	; 0xa1
 80059e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2221      	movs	r2, #33	; 0x21
 80059ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2207      	movs	r2, #7
 80059fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2207      	movs	r2, #7
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fa83 	bl	8006f10 <USBH_CtlReq>
 8005a0a:	4603      	mov	r3, r0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2221      	movs	r2, #33	; 0x21
 8005a22:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2207      	movs	r2, #7
 8005a3a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2207      	movs	r2, #7
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fa64 	bl	8006f10 <USBH_CtlReq>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b086      	sub	sp, #24
 8005a56:	af02      	add	r7, sp, #8
 8005a58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <CDC_ProcessTransmission+0x26>
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d023      	beq.n	8005abe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a76:	e05e      	b.n	8005b36 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	8b12      	ldrh	r2, [r2, #24]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d90b      	bls.n	8005a9c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8b1a      	ldrh	r2, [r3, #24]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	7b5b      	ldrb	r3, [r3, #13]
 8005a90:	2001      	movs	r0, #1
 8005a92:	9000      	str	r0, [sp, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 fc4a 	bl	800732e <USBH_BulkSendData>
 8005a9a:	e00b      	b.n	8005ab4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	7b5b      	ldrb	r3, [r3, #13]
 8005aaa:	2001      	movs	r0, #1
 8005aac:	9000      	str	r0, [sp, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fc3d 	bl	800732e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005abc:	e03b      	b.n	8005b36 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	7b5b      	ldrb	r3, [r3, #13]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 ff61 	bl	800798c <USBH_LL_GetURBState>
 8005aca:	4603      	mov	r3, r0
 8005acc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d128      	bne.n	8005b26 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	8b12      	ldrh	r2, [r2, #24]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d90e      	bls.n	8005afe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	8b12      	ldrh	r2, [r2, #24]
 8005ae8:	1a9a      	subs	r2, r3, r2
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	8b12      	ldrh	r2, [r2, #24]
 8005af6:	441a      	add	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	61da      	str	r2, [r3, #28]
 8005afc:	e002      	b.n	8005b04 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b14:	e00e      	b.n	8005b34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f868 	bl	8005bf4 <USBH_CDC_TransmitCallback>
      break;
 8005b24:	e006      	b.n	8005b34 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b26:	7afb      	ldrb	r3, [r7, #11]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d103      	bne.n	8005b34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b34:	bf00      	nop
  }
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d002      	beq.n	8005b64 <CDC_ProcessReception+0x26>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d00e      	beq.n	8005b80 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b62:	e043      	b.n	8005bec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	6a19      	ldr	r1, [r3, #32]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	8b5a      	ldrh	r2, [r3, #26]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	7b1b      	ldrb	r3, [r3, #12]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fc01 	bl	8007378 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2204      	movs	r2, #4
 8005b7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b7e:	e035      	b.n	8005bec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	7b1b      	ldrb	r3, [r3, #12]
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 ff00 	bl	800798c <USBH_LL_GetURBState>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d129      	bne.n	8005bea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	7b1b      	ldrb	r3, [r3, #12]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 fe63 	bl	8007868 <USBH_LL_GetLastXferSize>
 8005ba2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d016      	beq.n	8005bdc <CDC_ProcessReception+0x9e>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	8b5b      	ldrh	r3, [r3, #26]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d910      	bls.n	8005bdc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad2      	subs	r2, r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	441a      	add	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bda:	e006      	b.n	8005bea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f80f 	bl	8005c08 <USBH_CDC_ReceiveCallback>
      break;
 8005bea:	bf00      	nop
  }
}
 8005bec:	bf00      	nop
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c44:	2302      	movs	r3, #2
 8005c46:	e029      	b.n	8005c9c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	79fa      	ldrb	r2, [r7, #7]
 8005c4c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f81f 	bl	8005ca4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f001 fd33 	bl	8007700 <USBH_LL_Init>

  return USBH_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e009      	b.n	8005cca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	33e0      	adds	r3, #224	; 0xe0
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	d9f2      	bls.n	8005cb6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e009      	b.n	8005cea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d3f1      	bcc.n	8005cd6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2240      	movs	r2, #64	; 0x40
 8005d16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d016      	beq.n	8005d8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10e      	bne.n	8005d88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	33de      	adds	r3, #222	; 0xde
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	e004      	b.n	8005d92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	e001      	b.n	8005d92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d204      	bcs.n	8005dc6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005dc4:	e001      	b.n	8005dca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	70fb      	strb	r3, [r7, #3]
 8005dea:	460b      	mov	r3, r1
 8005dec:	70bb      	strb	r3, [r7, #2]
 8005dee:	4613      	mov	r3, r2
 8005df0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e02:	e025      	b.n	8005e50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	221a      	movs	r2, #26
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	3302      	adds	r3, #2
 8005e14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	795b      	ldrb	r3, [r3, #5]
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d002      	beq.n	8005e26 <USBH_FindInterface+0x4e>
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d111      	bne.n	8005e4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e2a:	78ba      	ldrb	r2, [r7, #2]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d002      	beq.n	8005e36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e30:	78bb      	ldrb	r3, [r7, #2]
 8005e32:	2bff      	cmp	r3, #255	; 0xff
 8005e34:	d109      	bne.n	8005e4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e3a:	787a      	ldrb	r2, [r7, #1]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d002      	beq.n	8005e46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e40:	787b      	ldrb	r3, [r7, #1]
 8005e42:	2bff      	cmp	r3, #255	; 0xff
 8005e44:	d101      	bne.n	8005e4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	e006      	b.n	8005e58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d9d6      	bls.n	8005e04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e56:	23ff      	movs	r3, #255	; 0xff
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 fc83 	bl	8007778 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e72:	2101      	movs	r1, #1
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 fd9c 	bl	80079b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d102      	bne.n	8005ea6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b0b      	cmp	r3, #11
 8005eae:	f200 81be 	bhi.w	800622e <USBH_Process+0x3aa>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <USBH_Process+0x34>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ee9 	.word	0x08005ee9
 8005ebc:	08005f1b 	.word	0x08005f1b
 8005ec0:	08005f83 	.word	0x08005f83
 8005ec4:	080061c9 	.word	0x080061c9
 8005ec8:	0800622f 	.word	0x0800622f
 8005ecc:	08006027 	.word	0x08006027
 8005ed0:	0800616f 	.word	0x0800616f
 8005ed4:	0800605d 	.word	0x0800605d
 8005ed8:	0800607d 	.word	0x0800607d
 8005edc:	0800609d 	.word	0x0800609d
 8005ee0:	080060e1 	.word	0x080060e1
 8005ee4:	080061b1 	.word	0x080061b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 819e 	beq.w	8006232 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005efc:	20c8      	movs	r0, #200	; 0xc8
 8005efe:	f001 fd9f 	bl	8007a40 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fc95 	bl	8007832 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f18:	e18b      	b.n	8006232 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d107      	bne.n	8005f34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f32:	e18d      	b.n	8006250 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f3e:	d914      	bls.n	8005f6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f46:	3301      	adds	r3, #1
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d903      	bls.n	8005f62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	220d      	movs	r2, #13
 8005f5e:	701a      	strb	r2, [r3, #0]
      break;
 8005f60:	e176      	b.n	8006250 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
      break;
 8005f68:	e172      	b.n	8006250 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f70:	f103 020a 	add.w	r2, r3, #10
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f7a:	200a      	movs	r0, #10
 8005f7c:	f001 fd60 	bl	8007a40 <USBH_Delay>
      break;
 8005f80:	e166      	b.n	8006250 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f92:	2104      	movs	r1, #4
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005f98:	2064      	movs	r0, #100	; 0x64
 8005f9a:	f001 fd51 	bl	8007a40 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fc20 	bl	80077e4 <USBH_LL_GetSpeed>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fa2b 	bl	8007412 <USBH_AllocPipe>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005fc4:	2180      	movs	r1, #128	; 0x80
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fa23 	bl	8007412 <USBH_AllocPipe>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7919      	ldrb	r1, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	9202      	str	r2, [sp, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	9201      	str	r2, [sp, #4]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 f9dc 	bl	80073b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	7959      	ldrb	r1, [r3, #5]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006010:	b292      	uxth	r2, r2
 8006012:	9202      	str	r2, [sp, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	9201      	str	r2, [sp, #4]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	4603      	mov	r3, r0
 800601c:	2200      	movs	r2, #0
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f9c8 	bl	80073b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006024:	e114      	b.n	8006250 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f918 	bl	800625c <USBH_HandleEnum>
 800602c:	4603      	mov	r3, r0
 800602e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 80fe 	bne.w	8006236 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006048:	2b01      	cmp	r3, #1
 800604a:	d103      	bne.n	8006054 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2208      	movs	r2, #8
 8006050:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006052:	e0f0      	b.n	8006236 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2207      	movs	r2, #7
 8006058:	701a      	strb	r2, [r3, #0]
      break;
 800605a:	e0ec      	b.n	8006236 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80e9 	beq.w	800623a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800606e:	2101      	movs	r1, #1
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2208      	movs	r2, #8
 8006078:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800607a:	e0de      	b.n	800623a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006082:	b29b      	uxth	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc2c 	bl	80068e4 <USBH_SetCfg>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 80d5 	bne.w	800623e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2209      	movs	r2, #9
 8006098:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800609a:	e0d0      	b.n	800623e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80060aa:	2101      	movs	r1, #1
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fc3c 	bl	800692a <USBH_SetFeature>
 80060b2:	4603      	mov	r3, r0
 80060b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	220a      	movs	r2, #10
 80060c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060c4:	e0bd      	b.n	8006242 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	f040 80b9 	bne.w	8006242 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	220a      	movs	r2, #10
 80060d4:	701a      	strb	r2, [r3, #0]
      break;
 80060d6:	e0b4      	b.n	8006242 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	220a      	movs	r2, #10
 80060dc:	701a      	strb	r2, [r3, #0]
      break;
 80060de:	e0b0      	b.n	8006242 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80ad 	beq.w	8006246 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e016      	b.n	8006128 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	32de      	adds	r2, #222	; 0xde
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	791a      	ldrb	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800610c:	429a      	cmp	r2, r3
 800610e:	d108      	bne.n	8006122 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006110:	7bfa      	ldrb	r2, [r7, #15]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	32de      	adds	r2, #222	; 0xde
 8006116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006120:	e005      	b.n	800612e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	3301      	adds	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0e5      	beq.n	80060fa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d016      	beq.n	8006166 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2206      	movs	r2, #6
 800614e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006156:	2103      	movs	r1, #3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800615c:	e073      	b.n	8006246 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	220d      	movs	r2, #13
 8006162:	701a      	strb	r2, [r3, #0]
      break;
 8006164:	e06f      	b.n	8006246 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	220d      	movs	r2, #13
 800616a:	701a      	strb	r2, [r3, #0]
      break;
 800616c:	e06b      	b.n	8006246 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
 8006184:	4603      	mov	r3, r0
 8006186:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	220b      	movs	r2, #11
 8006194:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006196:	e058      	b.n	800624a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d154      	bne.n	800624a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	220d      	movs	r2, #13
 80061a4:	701a      	strb	r2, [r3, #0]
      break;
 80061a6:	e050      	b.n	800624a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	220d      	movs	r2, #13
 80061ac:	701a      	strb	r2, [r3, #0]
      break;
 80061ae:	e04c      	b.n	800624a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d049      	beq.n	800624e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
      }
      break;
 80061c6:	e042      	b.n	800624e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fd67 	bl	8005ca4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006204:	2105      	movs	r1, #5
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b01      	cmp	r3, #1
 8006214:	d107      	bne.n	8006226 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fe20 	bl	8005e64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006224:	e014      	b.n	8006250 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 faa6 	bl	8007778 <USBH_LL_Start>
      break;
 800622c:	e010      	b.n	8006250 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800622e:	bf00      	nop
 8006230:	e00e      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 8006232:	bf00      	nop
 8006234:	e00c      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 8006236:	bf00      	nop
 8006238:	e00a      	b.n	8006250 <USBH_Process+0x3cc>
    break;
 800623a:	bf00      	nop
 800623c:	e008      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 800623e:	bf00      	nop
 8006240:	e006      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 8006242:	bf00      	nop
 8006244:	e004      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 8006246:	bf00      	nop
 8006248:	e002      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 800624a:	bf00      	nop
 800624c:	e000      	b.n	8006250 <USBH_Process+0x3cc>
      break;
 800624e:	bf00      	nop
  }
  return USBH_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af04      	add	r7, sp, #16
 8006262:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006268:	2301      	movs	r3, #1
 800626a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b07      	cmp	r3, #7
 8006272:	f200 81c1 	bhi.w	80065f8 <USBH_HandleEnum+0x39c>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <USBH_HandleEnum+0x20>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	0800629d 	.word	0x0800629d
 8006280:	0800635b 	.word	0x0800635b
 8006284:	080063c5 	.word	0x080063c5
 8006288:	08006453 	.word	0x08006453
 800628c:	080064bd 	.word	0x080064bd
 8006290:	0800652d 	.word	0x0800652d
 8006294:	08006573 	.word	0x08006573
 8006298:	080065b9 	.word	0x080065b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800629c:	2108      	movs	r1, #8
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa50 	bl	8006744 <USBH_Get_DevDesc>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d130      	bne.n	8006310 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	7919      	ldrb	r1, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062d2:	b292      	uxth	r2, r2
 80062d4:	9202      	str	r2, [sp, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	9201      	str	r2, [sp, #4]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	4603      	mov	r3, r0
 80062de:	2280      	movs	r2, #128	; 0x80
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f867 	bl	80073b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7959      	ldrb	r1, [r3, #5]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062fa:	b292      	uxth	r2, r2
 80062fc:	9202      	str	r2, [sp, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4603      	mov	r3, r0
 8006306:	2200      	movs	r2, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f853 	bl	80073b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800630e:	e175      	b.n	80065fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	2b03      	cmp	r3, #3
 8006314:	f040 8172 	bne.w	80065fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800631e:	3301      	adds	r3, #1
 8006320:	b2da      	uxtb	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800632e:	2b03      	cmp	r3, #3
 8006330:	d903      	bls.n	800633a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	220d      	movs	r2, #13
 8006336:	701a      	strb	r2, [r3, #0]
      break;
 8006338:	e160      	b.n	80065fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	795b      	ldrb	r3, [r3, #5]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f887 	bl	8007454 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	791b      	ldrb	r3, [r3, #4]
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f881 	bl	8007454 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
      break;
 8006358:	e150      	b.n	80065fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800635a:	2112      	movs	r1, #18
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f9f1 	bl	8006744 <USBH_Get_DevDesc>
 8006362:	4603      	mov	r3, r0
 8006364:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006372:	e145      	b.n	8006600 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	2b03      	cmp	r3, #3
 8006378:	f040 8142 	bne.w	8006600 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006382:	3301      	adds	r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006392:	2b03      	cmp	r3, #3
 8006394:	d903      	bls.n	800639e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	220d      	movs	r2, #13
 800639a:	701a      	strb	r2, [r3, #0]
      break;
 800639c:	e130      	b.n	8006600 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	795b      	ldrb	r3, [r3, #5]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f855 	bl	8007454 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	791b      	ldrb	r3, [r3, #4]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f84f 	bl	8007454 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
      break;
 80063c2:	e11d      	b.n	8006600 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80063c4:	2101      	movs	r1, #1
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa68 	bl	800689c <USBH_SetAddress>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d132      	bne.n	800643c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80063d6:	2002      	movs	r0, #2
 80063d8:	f001 fb32 	bl	8007a40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2203      	movs	r2, #3
 80063e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7919      	ldrb	r1, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063fe:	b292      	uxth	r2, r2
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	9201      	str	r2, [sp, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4603      	mov	r3, r0
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 ffd1 	bl	80073b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7959      	ldrb	r1, [r3, #5]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006426:	b292      	uxth	r2, r2
 8006428:	9202      	str	r2, [sp, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	9201      	str	r2, [sp, #4]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	4603      	mov	r3, r0
 8006432:	2200      	movs	r2, #0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 ffbd 	bl	80073b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800643a:	e0e3      	b.n	8006604 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	2b03      	cmp	r3, #3
 8006440:	f040 80e0 	bne.w	8006604 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	220d      	movs	r2, #13
 8006448:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	705a      	strb	r2, [r3, #1]
      break;
 8006450:	e0d8      	b.n	8006604 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006452:	2109      	movs	r1, #9
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f99d 	bl	8006794 <USBH_Get_CfgDesc>
 800645a:	4603      	mov	r3, r0
 800645c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2204      	movs	r2, #4
 8006468:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800646a:	e0cd      	b.n	8006608 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b03      	cmp	r3, #3
 8006470:	f040 80ca 	bne.w	8006608 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800647a:	3301      	adds	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800648a:	2b03      	cmp	r3, #3
 800648c:	d903      	bls.n	8006496 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	220d      	movs	r2, #13
 8006492:	701a      	strb	r2, [r3, #0]
      break;
 8006494:	e0b8      	b.n	8006608 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	795b      	ldrb	r3, [r3, #5]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ffd9 	bl	8007454 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 ffd3 	bl	8007454 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
      break;
 80064ba:	e0a5      	b.n	8006608 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f965 	bl	8006794 <USBH_Get_CfgDesc>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2205      	movs	r2, #5
 80064d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064da:	e097      	b.n	800660c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	f040 8094 	bne.w	800660c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ea:	3301      	adds	r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d903      	bls.n	8006506 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	220d      	movs	r2, #13
 8006502:	701a      	strb	r2, [r3, #0]
      break;
 8006504:	e082      	b.n	800660c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	795b      	ldrb	r3, [r3, #5]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ffa1 	bl	8007454 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	791b      	ldrb	r3, [r3, #4]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 ff9b 	bl	8007454 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
      break;
 800652a:	e06f      	b.n	800660c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006532:	2b00      	cmp	r3, #0
 8006534:	d019      	beq.n	800656a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006542:	23ff      	movs	r3, #255	; 0xff
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f949 	bl	80067dc <USBH_Get_StringDesc>
 800654a:	4603      	mov	r3, r0
 800654c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2206      	movs	r2, #6
 8006558:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800655a:	e059      	b.n	8006610 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d156      	bne.n	8006610 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2206      	movs	r2, #6
 8006566:	705a      	strb	r2, [r3, #1]
      break;
 8006568:	e052      	b.n	8006610 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2206      	movs	r2, #6
 800656e:	705a      	strb	r2, [r3, #1]
      break;
 8006570:	e04e      	b.n	8006610 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006578:	2b00      	cmp	r3, #0
 800657a:	d019      	beq.n	80065b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006588:	23ff      	movs	r3, #255	; 0xff
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f926 	bl	80067dc <USBH_Get_StringDesc>
 8006590:	4603      	mov	r3, r0
 8006592:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2207      	movs	r2, #7
 800659e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065a0:	e038      	b.n	8006614 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d135      	bne.n	8006614 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2207      	movs	r2, #7
 80065ac:	705a      	strb	r2, [r3, #1]
      break;
 80065ae:	e031      	b.n	8006614 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2207      	movs	r2, #7
 80065b4:	705a      	strb	r2, [r3, #1]
      break;
 80065b6:	e02d      	b.n	8006614 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d017      	beq.n	80065f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065ce:	23ff      	movs	r3, #255	; 0xff
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f903 	bl	80067dc <USBH_Get_StringDesc>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80065e4:	e018      	b.n	8006618 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d115      	bne.n	8006618 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
      break;
 80065f0:	e012      	b.n	8006618 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
      break;
 80065f6:	e00f      	b.n	8006618 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80065f8:	bf00      	nop
 80065fa:	e00e      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 80065fc:	bf00      	nop
 80065fe:	e00c      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 8006600:	bf00      	nop
 8006602:	e00a      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 8006604:	bf00      	nop
 8006606:	e008      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 8006608:	bf00      	nop
 800660a:	e006      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 800660c:	bf00      	nop
 800660e:	e004      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 8006610:	bf00      	nop
 8006612:	e002      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 8006614:	bf00      	nop
 8006616:	e000      	b.n	800661a <USBH_HandleEnum+0x3be>
      break;
 8006618:	bf00      	nop
  }
  return Status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f804 	bl	8006666 <USBH_HandleSof>
}
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b0b      	cmp	r3, #11
 8006676:	d10a      	bne.n	800668e <USBH_HandleSof+0x28>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
  }
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80066a6:	bf00      	nop
}
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066c2:	bf00      	nop
}
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 f846 	bl	80077ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fe93 	bl	8007454 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	795b      	ldrb	r3, [r3, #5]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fe8d 	bl	8007454 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af02      	add	r7, sp, #8
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	b29b      	uxth	r3, r3
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4613      	mov	r3, r2
 800675e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006762:	2100      	movs	r1, #0
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f864 	bl	8006832 <USBH_GetDescriptor>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f203 3026 	addw	r0, r3, #806	; 0x326
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	b292      	uxth	r2, r2
 8006784:	4619      	mov	r1, r3
 8006786:	f000 f919 	bl	80069bc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	331c      	adds	r3, #28
 80067a4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80067a6:	887b      	ldrh	r3, [r7, #2]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f83d 	bl	8006832 <USBH_GetDescriptor>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	461a      	mov	r2, r3
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f989 	bl	8006ae0 <USBH_ParseCfgDesc>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	461a      	mov	r2, r3
 80067e8:	460b      	mov	r3, r1
 80067ea:	72fb      	strb	r3, [r7, #11]
 80067ec:	4613      	mov	r3, r2
 80067ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006800:	893b      	ldrh	r3, [r7, #8]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	460b      	mov	r3, r1
 8006806:	2100      	movs	r1, #0
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f812 	bl	8006832 <USBH_GetDescriptor>
 800680e:	4603      	mov	r3, r0
 8006810:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d107      	bne.n	8006828 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800681e:	893a      	ldrh	r2, [r7, #8]
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fb26 	bl	8006e74 <USBH_ParseStringDesc>
  }

  return status;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	72fb      	strb	r3, [r7, #11]
 8006840:	4613      	mov	r3, r2
 8006842:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	789b      	ldrb	r3, [r3, #2]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d11c      	bne.n	8006886 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800684c:	7afb      	ldrb	r3, [r7, #11]
 800684e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006852:	b2da      	uxtb	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2206      	movs	r2, #6
 800685c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	893a      	ldrh	r2, [r7, #8]
 8006862:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006864:	893b      	ldrh	r3, [r7, #8]
 8006866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800686a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686e:	d104      	bne.n	800687a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f240 4209 	movw	r2, #1033	; 0x409
 8006876:	829a      	strh	r2, [r3, #20]
 8006878:	e002      	b.n	8006880 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8b3a      	ldrh	r2, [r7, #24]
 8006884:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006886:	8b3b      	ldrh	r3, [r7, #24]
 8006888:	461a      	mov	r2, r3
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fb3f 	bl	8006f10 <USBH_CtlReq>
 8006892:	4603      	mov	r3, r0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	789b      	ldrb	r3, [r3, #2]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10f      	bne.n	80068d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2205      	movs	r2, #5
 80068ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068d0:	2200      	movs	r2, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fb1b 	bl	8006f10 <USBH_CtlReq>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	789b      	ldrb	r3, [r3, #2]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d10e      	bne.n	8006916 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2209      	movs	r2, #9
 8006902:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	887a      	ldrh	r2, [r7, #2]
 8006908:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006916:	2200      	movs	r2, #0
 8006918:	2100      	movs	r1, #0
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 faf8 	bl	8006f10 <USBH_CtlReq>
 8006920:	4603      	mov	r3, r0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	789b      	ldrb	r3, [r3, #2]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d10f      	bne.n	800695e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2203      	movs	r2, #3
 8006948:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fad4 	bl	8006f10 <USBH_CtlReq>
 8006968:	4603      	mov	r3, r0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	789b      	ldrb	r3, [r3, #2]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10f      	bne.n	80069a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80069a6:	2200      	movs	r2, #0
 80069a8:	2100      	movs	r1, #0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fab0 	bl	8006f10 <USBH_CtlReq>
 80069b0:	4603      	mov	r3, r0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	785a      	ldrb	r2, [r3, #1]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3302      	adds	r3, #2
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3303      	adds	r3, #3
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	791a      	ldrb	r2, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	795a      	ldrb	r2, [r3, #5]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	799a      	ldrb	r2, [r3, #6]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	79da      	ldrb	r2, [r3, #7]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	79db      	ldrb	r3, [r3, #7]
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	dc0f      	bgt.n	8006a3e <USBH_ParseDevDesc+0x82>
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	db14      	blt.n	8006a4c <USBH_ParseDevDesc+0x90>
 8006a22:	3b08      	subs	r3, #8
 8006a24:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <USBH_ParseDevDesc+0x120>)
 8006a26:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf14      	ite	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	2300      	moveq	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <USBH_ParseDevDesc+0x86>
 8006a3c:	e006      	b.n	8006a4c <USBH_ParseDevDesc+0x90>
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d104      	bne.n	8006a4c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	79da      	ldrb	r2, [r3, #7]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	71da      	strb	r2, [r3, #7]
      break;
 8006a4a:	e003      	b.n	8006a54 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2240      	movs	r2, #64	; 0x40
 8006a50:	71da      	strb	r2, [r3, #7]
      break;
 8006a52:	bf00      	nop
  }

  if (length > 8U)
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d939      	bls.n	8006ace <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3309      	adds	r3, #9
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	330a      	adds	r3, #10
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	330b      	adds	r3, #11
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	330c      	adds	r3, #12
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	330d      	adds	r3, #13
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7b9a      	ldrb	r2, [r3, #14]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	7bda      	ldrb	r2, [r3, #15]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	7c1a      	ldrb	r2, [r3, #16]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7c5a      	ldrb	r2, [r3, #17]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	745a      	strb	r2, [r3, #17]
  }
}
 8006ace:	bf00      	nop
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	01000101 	.word	0x01000101

08006ae0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	; 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006af4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	785a      	ldrb	r2, [r3, #1]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	3302      	adds	r3, #2
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	3303      	adds	r3, #3
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3c:	bf28      	it	cs
 8006b3e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	791a      	ldrb	r2, [r3, #4]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	795a      	ldrb	r2, [r3, #5]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	799a      	ldrb	r2, [r3, #6]
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	79da      	ldrb	r2, [r3, #7]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	7a1a      	ldrb	r2, [r3, #8]
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d002      	beq.n	8006b7e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	2209      	movs	r2, #9
 8006b7c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	f240 809d 	bls.w	8006cc0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b86:	2309      	movs	r3, #9
 8006b88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b8e:	e081      	b.n	8006c94 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b90:	f107 0316 	add.w	r3, r7, #22
 8006b94:	4619      	mov	r1, r3
 8006b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b98:	f000 f99f 	bl	8006eda <USBH_GetNextDesc>
 8006b9c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d176      	bne.n	8006c94 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d002      	beq.n	8006bb4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	2209      	movs	r2, #9
 8006bb2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb8:	221a      	movs	r2, #26
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	6a3a      	ldr	r2, [r7, #32]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bca:	69f8      	ldr	r0, [r7, #28]
 8006bcc:	f000 f87e 	bl	8006ccc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bda:	e043      	b.n	8006c64 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bdc:	f107 0316 	add.w	r3, r7, #22
 8006be0:	4619      	mov	r1, r3
 8006be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be4:	f000 f979 	bl	8006eda <USBH_GetNextDesc>
 8006be8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d138      	bne.n	8006c64 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	795b      	ldrb	r3, [r3, #5]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10f      	bne.n	8006c1a <USBH_ParseCfgDesc+0x13a>
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	799b      	ldrb	r3, [r3, #6]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d10b      	bne.n	8006c1a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	79db      	ldrb	r3, [r3, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10f      	bne.n	8006c2a <USBH_ParseCfgDesc+0x14a>
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d00b      	beq.n	8006c2a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2209      	movs	r2, #9
 8006c16:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c18:	e007      	b.n	8006c2a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	d004      	beq.n	8006c2c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2207      	movs	r2, #7
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	e000      	b.n	8006c2c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c2a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c34:	3201      	adds	r2, #1
 8006c36:	00d2      	lsls	r2, r2, #3
 8006c38:	211a      	movs	r1, #26
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	3308      	adds	r3, #8
 8006c42:	6a3a      	ldr	r2, [r7, #32]
 8006c44:	4413      	add	r3, r2
 8006c46:	3304      	adds	r3, #4
 8006c48:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4c:	69b9      	ldr	r1, [r7, #24]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f86b 	bl	8006d2a <USBH_ParseEPDesc>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006c5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	791b      	ldrb	r3, [r3, #4]
 8006c68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d204      	bcs.n	8006c7a <USBH_ParseCfgDesc+0x19a>
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	885a      	ldrh	r2, [r3, #2]
 8006c74:	8afb      	ldrh	r3, [r7, #22]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d8b0      	bhi.n	8006bdc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	791b      	ldrb	r3, [r3, #4]
 8006c7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d201      	bcs.n	8006c8a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e01c      	b.n	8006cc4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8e:	3301      	adds	r3, #1
 8006c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d805      	bhi.n	8006ca8 <USBH_ParseCfgDesc+0x1c8>
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	885a      	ldrh	r2, [r3, #2]
 8006ca0:	8afb      	ldrh	r3, [r7, #22]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	f63f af74 	bhi.w	8006b90 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	bf28      	it	cs
 8006cb0:	2302      	movcs	r3, #2
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d201      	bcs.n	8006cc0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e001      	b.n	8006cc4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3730      	adds	r7, #48	; 0x30
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	785a      	ldrb	r2, [r3, #1]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	789a      	ldrb	r2, [r3, #2]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	78da      	ldrb	r2, [r3, #3]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	791a      	ldrb	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	795a      	ldrb	r2, [r3, #5]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	799a      	ldrb	r2, [r3, #6]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	79da      	ldrb	r2, [r3, #7]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	7a1a      	ldrb	r2, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	721a      	strb	r2, [r3, #8]
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b087      	sub	sp, #28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	785a      	ldrb	r2, [r3, #1]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	789a      	ldrb	r2, [r3, #2]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	78da      	ldrb	r2, [r3, #3]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3305      	adds	r3, #5
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	799a      	ldrb	r2, [r3, #6]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006d86:	2303      	movs	r3, #3
 8006d88:	75fb      	strb	r3, [r7, #23]
 8006d8a:	e033      	b.n	8006df4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	889b      	ldrh	r3, [r3, #4]
 8006d90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d94:	f023 0307 	bic.w	r3, r3, #7
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	889b      	ldrh	r3, [r3, #4]
 8006da2:	b21a      	sxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3304      	adds	r3, #4
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	b299      	uxth	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3305      	adds	r3, #5
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	430b      	orrs	r3, r1
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d110      	bne.n	8006de6 <USBH_ParseEPDesc+0xbc>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	b299      	uxth	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3305      	adds	r3, #5
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	b21b      	sxth	r3, r3
 8006dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	e001      	b.n	8006dea <USBH_ParseEPDesc+0xc0>
 8006de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dea:	4313      	orrs	r3, r2
 8006dec:	b21b      	sxth	r3, r3
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d116      	bne.n	8006e2c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	78db      	ldrb	r3, [r3, #3]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d005      	beq.n	8006e16 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d127      	bne.n	8006e66 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	799b      	ldrb	r3, [r3, #6]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <USBH_ParseEPDesc+0xfc>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	799b      	ldrb	r3, [r3, #6]
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d91f      	bls.n	8006e66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e26:	2303      	movs	r3, #3
 8006e28:	75fb      	strb	r3, [r7, #23]
 8006e2a:	e01c      	b.n	8006e66 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	78db      	ldrb	r3, [r3, #3]
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d10a      	bne.n	8006e4e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	799b      	ldrb	r3, [r3, #6]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <USBH_ParseEPDesc+0x11e>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	799b      	ldrb	r3, [r3, #6]
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d90e      	bls.n	8006e66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	75fb      	strb	r3, [r7, #23]
 8006e4c:	e00b      	b.n	8006e66 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	78db      	ldrb	r3, [r3, #3]
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d105      	bne.n	8006e66 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	799b      	ldrb	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e62:	2303      	movs	r3, #3
 8006e64:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d120      	bne.n	8006ece <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	1e9a      	subs	r2, r3, #2
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bf28      	it	cs
 8006e98:	4613      	movcs	r3, r2
 8006e9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	82fb      	strh	r3, [r7, #22]
 8006ea6:	e00b      	b.n	8006ec0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006ea8:	8afb      	ldrh	r3, [r7, #22]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006eba:	8afb      	ldrh	r3, [r7, #22]
 8006ebc:	3302      	adds	r3, #2
 8006ebe:	82fb      	strh	r3, [r7, #22]
 8006ec0:	8afa      	ldrh	r2, [r7, #22]
 8006ec2:	8abb      	ldrh	r3, [r7, #20]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d3ef      	bcc.n	8006ea8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4413      	add	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	789b      	ldrb	r3, [r3, #2]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d002      	beq.n	8006f30 <USBH_CtlReq+0x20>
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d00f      	beq.n	8006f4e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f2e:	e027      	b.n	8006f80 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	88fa      	ldrh	r2, [r7, #6]
 8006f3a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2202      	movs	r2, #2
 8006f46:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4c:	e018      	b.n	8006f80 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f81c 	bl	8006f8c <USBH_HandleControl>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USBH_CtlReq+0x54>
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d106      	bne.n	8006f72 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	761a      	strb	r2, [r3, #24]
      break;
 8006f70:	e005      	b.n	8006f7e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d102      	bne.n	8006f7e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	709a      	strb	r2, [r3, #2]
      break;
 8006f7e:	bf00      	nop
  }
  return status;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7e1b      	ldrb	r3, [r3, #24]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	2b0a      	cmp	r3, #10
 8006fa4:	f200 8156 	bhi.w	8007254 <USBH_HandleControl+0x2c8>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USBH_HandleControl+0x24>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	08006ff7 	.word	0x08006ff7
 8006fb8:	08007061 	.word	0x08007061
 8006fbc:	08007087 	.word	0x08007087
 8006fc0:	080070bf 	.word	0x080070bf
 8006fc4:	080070e9 	.word	0x080070e9
 8006fc8:	0800713b 	.word	0x0800713b
 8006fcc:	0800715d 	.word	0x0800715d
 8006fd0:	08007199 	.word	0x08007199
 8006fd4:	080071bf 	.word	0x080071bf
 8006fd8:	080071fd 	.word	0x080071fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f103 0110 	add.w	r1, r3, #16
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	795b      	ldrb	r3, [r3, #5]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f943 	bl	8007274 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	761a      	strb	r2, [r3, #24]
      break;
 8006ff4:	e139      	b.n	800726a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	795b      	ldrb	r3, [r3, #5]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fcc5 	bl	800798c <USBH_LL_GetURBState>
 8007002:	4603      	mov	r3, r0
 8007004:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d11e      	bne.n	800704a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007014:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	8adb      	ldrh	r3, [r3, #22]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800701e:	7b7b      	ldrb	r3, [r7, #13]
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d103      	bne.n	800702c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2203      	movs	r2, #3
 8007028:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800702a:	e115      	b.n	8007258 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2205      	movs	r2, #5
 8007030:	761a      	strb	r2, [r3, #24]
      break;
 8007032:	e111      	b.n	8007258 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007034:	7b7b      	ldrb	r3, [r7, #13]
 8007036:	2b80      	cmp	r3, #128	; 0x80
 8007038:	d103      	bne.n	8007042 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2209      	movs	r2, #9
 800703e:	761a      	strb	r2, [r3, #24]
      break;
 8007040:	e10a      	b.n	8007258 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2207      	movs	r2, #7
 8007046:	761a      	strb	r2, [r3, #24]
      break;
 8007048:	e106      	b.n	8007258 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b04      	cmp	r3, #4
 800704e:	d003      	beq.n	8007058 <USBH_HandleControl+0xcc>
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b02      	cmp	r3, #2
 8007054:	f040 8100 	bne.w	8007258 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	220b      	movs	r2, #11
 800705c:	761a      	strb	r2, [r3, #24]
      break;
 800705e:	e0fb      	b.n	8007258 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007066:	b29a      	uxth	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6899      	ldr	r1, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	899a      	ldrh	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	791b      	ldrb	r3, [r3, #4]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f93a 	bl	80072f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2204      	movs	r2, #4
 8007082:	761a      	strb	r2, [r3, #24]
      break;
 8007084:	e0f1      	b.n	800726a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fc7d 	bl	800798c <USBH_LL_GetURBState>
 8007092:	4603      	mov	r3, r0
 8007094:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d102      	bne.n	80070a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2209      	movs	r2, #9
 80070a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b05      	cmp	r3, #5
 80070a6:	d102      	bne.n	80070ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80070a8:	2303      	movs	r3, #3
 80070aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070ac:	e0d6      	b.n	800725c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	f040 80d3 	bne.w	800725c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	220b      	movs	r2, #11
 80070ba:	761a      	strb	r2, [r3, #24]
      break;
 80070bc:	e0ce      	b.n	800725c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6899      	ldr	r1, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	899a      	ldrh	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	795b      	ldrb	r3, [r3, #5]
 80070ca:	2001      	movs	r0, #1
 80070cc:	9000      	str	r0, [sp, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8ea 	bl	80072a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2206      	movs	r2, #6
 80070e4:	761a      	strb	r2, [r3, #24]
      break;
 80070e6:	e0c0      	b.n	800726a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	795b      	ldrb	r3, [r3, #5]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fc4c 	bl	800798c <USBH_LL_GetURBState>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d103      	bne.n	8007106 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2207      	movs	r2, #7
 8007102:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007104:	e0ac      	b.n	8007260 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b05      	cmp	r3, #5
 800710a:	d105      	bne.n	8007118 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	220c      	movs	r2, #12
 8007110:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007112:	2303      	movs	r3, #3
 8007114:	73fb      	strb	r3, [r7, #15]
      break;
 8007116:	e0a3      	b.n	8007260 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d103      	bne.n	8007126 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2205      	movs	r2, #5
 8007122:	761a      	strb	r2, [r3, #24]
      break;
 8007124:	e09c      	b.n	8007260 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b04      	cmp	r3, #4
 800712a:	f040 8099 	bne.w	8007260 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	220b      	movs	r2, #11
 8007132:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007134:	2302      	movs	r3, #2
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	e092      	b.n	8007260 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	791b      	ldrb	r3, [r3, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f8d5 	bl	80072f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800714e:	b29a      	uxth	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2208      	movs	r2, #8
 8007158:	761a      	strb	r2, [r3, #24]

      break;
 800715a:	e086      	b.n	800726a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	791b      	ldrb	r3, [r3, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fc12 	bl	800798c <USBH_LL_GetURBState>
 8007168:	4603      	mov	r3, r0
 800716a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d105      	bne.n	800717e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	220d      	movs	r2, #13
 8007176:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800717c:	e072      	b.n	8007264 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d103      	bne.n	800718c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	220b      	movs	r2, #11
 8007188:	761a      	strb	r2, [r3, #24]
      break;
 800718a:	e06b      	b.n	8007264 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b05      	cmp	r3, #5
 8007190:	d168      	bne.n	8007264 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007192:	2303      	movs	r3, #3
 8007194:	73fb      	strb	r3, [r7, #15]
      break;
 8007196:	e065      	b.n	8007264 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	795b      	ldrb	r3, [r3, #5]
 800719c:	2201      	movs	r2, #1
 800719e:	9200      	str	r2, [sp, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f87f 	bl	80072a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	220a      	movs	r2, #10
 80071ba:	761a      	strb	r2, [r3, #24]
      break;
 80071bc:	e055      	b.n	800726a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	795b      	ldrb	r3, [r3, #5]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fbe1 	bl	800798c <USBH_LL_GetURBState>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d105      	bne.n	80071e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220d      	movs	r2, #13
 80071dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071de:	e043      	b.n	8007268 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d103      	bne.n	80071ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2209      	movs	r2, #9
 80071ea:	761a      	strb	r2, [r3, #24]
      break;
 80071ec:	e03c      	b.n	8007268 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d139      	bne.n	8007268 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	220b      	movs	r2, #11
 80071f8:	761a      	strb	r2, [r3, #24]
      break;
 80071fa:	e035      	b.n	8007268 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	7e5b      	ldrb	r3, [r3, #25]
 8007200:	3301      	adds	r3, #1
 8007202:	b2da      	uxtb	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	765a      	strb	r2, [r3, #25]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7e5b      	ldrb	r3, [r3, #25]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d806      	bhi.n	800721e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800721c:	e025      	b.n	800726a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007224:	2106      	movs	r1, #6
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	795b      	ldrb	r3, [r3, #5]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f90c 	bl	8007454 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	791b      	ldrb	r3, [r3, #4]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f906 	bl	8007454 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800724e:	2302      	movs	r3, #2
 8007250:	73fb      	strb	r3, [r7, #15]
      break;
 8007252:	e00a      	b.n	800726a <USBH_HandleControl+0x2de>

    default:
      break;
 8007254:	bf00      	nop
 8007256:	e008      	b.n	800726a <USBH_HandleControl+0x2de>
      break;
 8007258:	bf00      	nop
 800725a:	e006      	b.n	800726a <USBH_HandleControl+0x2de>
      break;
 800725c:	bf00      	nop
 800725e:	e004      	b.n	800726a <USBH_HandleControl+0x2de>
      break;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <USBH_HandleControl+0x2de>
      break;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <USBH_HandleControl+0x2de>
      break;
 8007268:	bf00      	nop
  }

  return status;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af04      	add	r7, sp, #16
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007282:	79f9      	ldrb	r1, [r7, #7]
 8007284:	2300      	movs	r3, #0
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	2308      	movs	r3, #8
 800728a:	9302      	str	r3, [sp, #8]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	2300      	movs	r3, #0
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fb46 	bl	800792a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af04      	add	r7, sp, #16
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4611      	mov	r1, r2
 80072b4:	461a      	mov	r2, r3
 80072b6:	460b      	mov	r3, r1
 80072b8:	80fb      	strh	r3, [r7, #6]
 80072ba:	4613      	mov	r3, r2
 80072bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072cc:	7979      	ldrb	r1, [r7, #5]
 80072ce:	7e3b      	ldrb	r3, [r7, #24]
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	9302      	str	r3, [sp, #8]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	2301      	movs	r3, #1
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	2300      	movs	r3, #0
 80072e0:	2200      	movs	r2, #0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fb21 	bl	800792a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b088      	sub	sp, #32
 80072f6:	af04      	add	r7, sp, #16
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	4611      	mov	r1, r2
 80072fe:	461a      	mov	r2, r3
 8007300:	460b      	mov	r3, r1
 8007302:	80fb      	strh	r3, [r7, #6]
 8007304:	4613      	mov	r3, r2
 8007306:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007308:	7979      	ldrb	r1, [r7, #5]
 800730a:	2300      	movs	r3, #0
 800730c:	9303      	str	r3, [sp, #12]
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	9302      	str	r3, [sp, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2301      	movs	r3, #1
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	2201      	movs	r2, #1
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fb03 	bl	800792a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007324:	2300      	movs	r3, #0

}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af04      	add	r7, sp, #16
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	4611      	mov	r1, r2
 800733a:	461a      	mov	r2, r3
 800733c:	460b      	mov	r3, r1
 800733e:	80fb      	strh	r3, [r7, #6]
 8007340:	4613      	mov	r3, r2
 8007342:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007352:	7979      	ldrb	r1, [r7, #5]
 8007354:	7e3b      	ldrb	r3, [r7, #24]
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	2301      	movs	r3, #1
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	2302      	movs	r3, #2
 8007366:	2200      	movs	r2, #0
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fade 	bl	800792a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af04      	add	r7, sp, #16
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4611      	mov	r1, r2
 8007384:	461a      	mov	r2, r3
 8007386:	460b      	mov	r3, r1
 8007388:	80fb      	strh	r3, [r7, #6]
 800738a:	4613      	mov	r3, r2
 800738c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800738e:	7979      	ldrb	r1, [r7, #5]
 8007390:	2300      	movs	r3, #0
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	2301      	movs	r3, #1
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2302      	movs	r3, #2
 80073a2:	2201      	movs	r2, #1
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fac0 	bl	800792a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af04      	add	r7, sp, #16
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	70fb      	strb	r3, [r7, #3]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70bb      	strb	r3, [r7, #2]
 80073ca:	4613      	mov	r3, r2
 80073cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073ce:	7878      	ldrb	r0, [r7, #1]
 80073d0:	78ba      	ldrb	r2, [r7, #2]
 80073d2:	78f9      	ldrb	r1, [r7, #3]
 80073d4:	8b3b      	ldrh	r3, [r7, #24]
 80073d6:	9302      	str	r3, [sp, #8]
 80073d8:	7d3b      	ldrb	r3, [r7, #20]
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	7c3b      	ldrb	r3, [r7, #16]
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	4603      	mov	r3, r0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa53 	bl	800788e <USBH_LL_OpenPipe>

  return USBH_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa72 	bl	80078ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f836 	bl	8007490 <USBH_GetFreePipe>
 8007424:	4603      	mov	r3, r0
 8007426:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800742e:	4293      	cmp	r3, r2
 8007430:	d00a      	beq.n	8007448 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	89fb      	ldrh	r3, [r7, #14]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	33e0      	adds	r3, #224	; 0xe0
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	b2db      	uxtb	r3, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	d80d      	bhi.n	8007482 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	33e0      	adds	r3, #224	; 0xe0
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	33e0      	adds	r3, #224	; 0xe0
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	e00f      	b.n	80074c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	33e0      	adds	r3, #224	; 0xe0
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	e007      	b.n	80074cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	3301      	adds	r3, #1
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b0f      	cmp	r3, #15
 80074c6:	d9ec      	bls.n	80074a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074dc:	2201      	movs	r2, #1
 80074de:	490e      	ldr	r1, [pc, #56]	; (8007518 <MX_USB_HOST_Init+0x40>)
 80074e0:	480e      	ldr	r0, [pc, #56]	; (800751c <MX_USB_HOST_Init+0x44>)
 80074e2:	f7fe fba5 	bl	8005c30 <USBH_Init>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074ec:	f7f9 fa29 	bl	8000942 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80074f0:	490b      	ldr	r1, [pc, #44]	; (8007520 <MX_USB_HOST_Init+0x48>)
 80074f2:	480a      	ldr	r0, [pc, #40]	; (800751c <MX_USB_HOST_Init+0x44>)
 80074f4:	f7fe fc2a 	bl	8005d4c <USBH_RegisterClass>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074fe:	f7f9 fa20 	bl	8000942 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007502:	4806      	ldr	r0, [pc, #24]	; (800751c <MX_USB_HOST_Init+0x44>)
 8007504:	f7fe fcae 	bl	8005e64 <USBH_Start>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800750e:	f7f9 fa18 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	08007539 	.word	0x08007539
 800751c:	20000194 	.word	0x20000194
 8007520:	2000000c 	.word	0x2000000c

08007524 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007528:	4802      	ldr	r0, [pc, #8]	; (8007534 <MX_USB_HOST_Process+0x10>)
 800752a:	f7fe fcab 	bl	8005e84 <USBH_Process>
}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000194 	.word	0x20000194

08007538 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	3b01      	subs	r3, #1
 8007548:	2b04      	cmp	r3, #4
 800754a:	d819      	bhi.n	8007580 <USBH_UserProcess+0x48>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <USBH_UserProcess+0x1c>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007581 	.word	0x08007581
 8007558:	08007571 	.word	0x08007571
 800755c:	08007581 	.word	0x08007581
 8007560:	08007579 	.word	0x08007579
 8007564:	08007569 	.word	0x08007569
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <USBH_UserProcess+0x58>)
 800756a:	2203      	movs	r2, #3
 800756c:	701a      	strb	r2, [r3, #0]
  break;
 800756e:	e008      	b.n	8007582 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <USBH_UserProcess+0x58>)
 8007572:	2202      	movs	r2, #2
 8007574:	701a      	strb	r2, [r3, #0]
  break;
 8007576:	e004      	b.n	8007582 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <USBH_UserProcess+0x58>)
 800757a:	2201      	movs	r2, #1
 800757c:	701a      	strb	r2, [r3, #0]
  break;
 800757e:	e000      	b.n	8007582 <USBH_UserProcess+0x4a>

  default:
  break;
 8007580:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2000056c 	.word	0x2000056c

08007594 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800759c:	f107 0314 	add.w	r3, r7, #20
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b4:	d147      	bne.n	8007646 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	4b25      	ldr	r3, [pc, #148]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4a24      	ldr	r2, [pc, #144]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6313      	str	r3, [r2, #48]	; 0x30
 80075c6:	4b22      	ldr	r3, [pc, #136]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80075d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80075e0:	f107 0314 	add.w	r3, r7, #20
 80075e4:	4619      	mov	r1, r3
 80075e6:	481b      	ldr	r0, [pc, #108]	; (8007654 <HAL_HCD_MspInit+0xc0>)
 80075e8:	f7f9 fdb0 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f2:	2302      	movs	r3, #2
 80075f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075fa:	2300      	movs	r3, #0
 80075fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075fe:	230a      	movs	r3, #10
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007602:	f107 0314 	add.w	r3, r7, #20
 8007606:	4619      	mov	r1, r3
 8007608:	4812      	ldr	r0, [pc, #72]	; (8007654 <HAL_HCD_MspInit+0xc0>)
 800760a:	f7f9 fd9f 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800760e:	4b10      	ldr	r3, [pc, #64]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 8007614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007618:	6353      	str	r3, [r2, #52]	; 0x34
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	4a0b      	ldr	r2, [pc, #44]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 8007624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007628:	6453      	str	r3, [r2, #68]	; 0x44
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <HAL_HCD_MspInit+0xbc>)
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	2043      	movs	r0, #67	; 0x43
 800763c:	f7f9 fd4b 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007640:	2043      	movs	r0, #67	; 0x43
 8007642:	f7f9 fd64 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007646:	bf00      	nop
 8007648:	3728      	adds	r7, #40	; 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40023800 	.word	0x40023800
 8007654:	40020000 	.word	0x40020000

08007658 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe ffeb 	bl	8006642 <USBH_LL_IncTimer>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f823 	bl	80066ce <USBH_LL_Connect>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff f82c 	bl	80066fc <USBH_LL_Disconnect>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
 80076b8:	4613      	mov	r3, r2
 80076ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe ffdd 	bl	8006696 <USBH_LL_PortEnabled>
}
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe ffdd 	bl	80066b2 <USBH_LL_PortDisabled>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800770e:	2b01      	cmp	r3, #1
 8007710:	d12a      	bne.n	8007768 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007712:	4a18      	ldr	r2, [pc, #96]	; (8007774 <USBH_LL_Init+0x74>)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a15      	ldr	r2, [pc, #84]	; (8007774 <USBH_LL_Init+0x74>)
 800771e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <USBH_LL_Init+0x74>)
 8007724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007728:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <USBH_LL_Init+0x74>)
 800772c:	2208      	movs	r2, #8
 800772e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <USBH_LL_Init+0x74>)
 8007732:	2201      	movs	r2, #1
 8007734:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007736:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <USBH_LL_Init+0x74>)
 8007738:	2200      	movs	r2, #0
 800773a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <USBH_LL_Init+0x74>)
 800773e:	2202      	movs	r2, #2
 8007740:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <USBH_LL_Init+0x74>)
 8007744:	2200      	movs	r2, #0
 8007746:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007748:	480a      	ldr	r0, [pc, #40]	; (8007774 <USBH_LL_Init+0x74>)
 800774a:	f7f9 feb4 	bl	80014b6 <HAL_HCD_Init>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007754:	f7f9 f8f5 	bl	8000942 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007758:	4806      	ldr	r0, [pc, #24]	; (8007774 <USBH_LL_Init+0x74>)
 800775a:	f7fa fa98 	bl	8001c8e <HAL_HCD_GetCurrentFrame>
 800775e:	4603      	mov	r3, r0
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fe ff5e 	bl	8006624 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000570 	.word	0x20000570

08007778 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa fa07 	bl	8001ba2 <HAL_HCD_Start>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f95c 	bl	8007a58 <USBH_Get_USB_Status>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fa fa0f 	bl	8001be8 <HAL_HCD_Stop>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 f941 	bl	8007a58 <USBH_Get_USB_Status>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077da:	7bbb      	ldrb	r3, [r7, #14]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fa fa57 	bl	8001caa <HAL_HCD_GetCurrentSpeed>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d00c      	beq.n	800781c <USBH_LL_GetSpeed+0x38>
 8007802:	2b02      	cmp	r3, #2
 8007804:	d80d      	bhi.n	8007822 <USBH_LL_GetSpeed+0x3e>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <USBH_LL_GetSpeed+0x2c>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d003      	beq.n	8007816 <USBH_LL_GetSpeed+0x32>
 800780e:	e008      	b.n	8007822 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
    break;
 8007814:	e008      	b.n	8007828 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007816:	2301      	movs	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	e005      	b.n	8007828 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800781c:	2302      	movs	r3, #2
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	e002      	b.n	8007828 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007822:	2301      	movs	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
    break;
 8007826:	bf00      	nop
  }
  return  speed;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007848:	4618      	mov	r0, r3
 800784a:	f7fa f9ea 	bl	8001c22 <HAL_HCD_ResetPort>
 800784e:	4603      	mov	r3, r0
 8007850:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 f8ff 	bl	8007a58 <USBH_Get_USB_Status>
 800785a:	4603      	mov	r3, r0
 800785c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800785e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f7fa f9f1 	bl	8001c66 <HAL_HCD_HC_GetXferCount>
 8007884:	4603      	mov	r3, r0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800788e:	b590      	push	{r4, r7, lr}
 8007890:	b089      	sub	sp, #36	; 0x24
 8007892:	af04      	add	r7, sp, #16
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	461a      	mov	r2, r3
 800789c:	4603      	mov	r3, r0
 800789e:	70fb      	strb	r3, [r7, #3]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70bb      	strb	r3, [r7, #2]
 80078a4:	4613      	mov	r3, r2
 80078a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078b6:	787c      	ldrb	r4, [r7, #1]
 80078b8:	78ba      	ldrb	r2, [r7, #2]
 80078ba:	78f9      	ldrb	r1, [r7, #3]
 80078bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078be:	9302      	str	r3, [sp, #8]
 80078c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4623      	mov	r3, r4
 80078ce:	f7f9 fe54 	bl	800157a <HAL_HCD_HC_Init>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 f8bd 	bl	8007a58 <USBH_Get_USB_Status>
 80078de:	4603      	mov	r3, r0
 80078e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd90      	pop	{r4, r7, pc}

080078ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7f9 fec4 	bl	8001698 <HAL_HCD_HC_Halt>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f89e 	bl	8007a58 <USBH_Get_USB_Status>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007920:	7bbb      	ldrb	r3, [r7, #14]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800792a:	b590      	push	{r4, r7, lr}
 800792c:	b089      	sub	sp, #36	; 0x24
 800792e:	af04      	add	r7, sp, #16
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	4608      	mov	r0, r1
 8007934:	4611      	mov	r1, r2
 8007936:	461a      	mov	r2, r3
 8007938:	4603      	mov	r3, r0
 800793a:	70fb      	strb	r3, [r7, #3]
 800793c:	460b      	mov	r3, r1
 800793e:	70bb      	strb	r3, [r7, #2]
 8007940:	4613      	mov	r3, r2
 8007942:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007952:	787c      	ldrb	r4, [r7, #1]
 8007954:	78ba      	ldrb	r2, [r7, #2]
 8007956:	78f9      	ldrb	r1, [r7, #3]
 8007958:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800795c:	9303      	str	r3, [sp, #12]
 800795e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007960:	9302      	str	r3, [sp, #8]
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	4623      	mov	r3, r4
 800796e:	f7f9 feb7 	bl	80016e0 <HAL_HCD_HC_SubmitRequest>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f86d 	bl	8007a58 <USBH_Get_USB_Status>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007982:	7bbb      	ldrb	r3, [r7, #14]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}

0800798c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fa f94b 	bl	8001c3e <HAL_HCD_HC_GetURBState>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d103      	bne.n	80079d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f870 	bl	8007ab0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079d0:	20c8      	movs	r0, #200	; 0xc8
 80079d2:	f7f9 fa6b 	bl	8000eac <HAL_Delay>
  return USBH_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
 80079ec:	4613      	mov	r3, r2
 80079ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	212c      	movs	r1, #44	; 0x2c
 80079fe:	fb01 f303 	mul.w	r3, r1, r3
 8007a02:	4413      	add	r3, r2
 8007a04:	333b      	adds	r3, #59	; 0x3b
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d009      	beq.n	8007a20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	212c      	movs	r1, #44	; 0x2c
 8007a12:	fb01 f303 	mul.w	r3, r1, r3
 8007a16:	4413      	add	r3, r2
 8007a18:	3354      	adds	r3, #84	; 0x54
 8007a1a:	78ba      	ldrb	r2, [r7, #2]
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e008      	b.n	8007a32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	212c      	movs	r1, #44	; 0x2c
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3355      	adds	r3, #85	; 0x55
 8007a2e:	78ba      	ldrb	r2, [r7, #2]
 8007a30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7f9 fa2f 	bl	8000eac <HAL_Delay>
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d817      	bhi.n	8007a9c <USBH_Get_USB_Status+0x44>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBH_Get_USB_Status+0x1c>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007a8b 	.word	0x08007a8b
 8007a7c:	08007a91 	.word	0x08007a91
 8007a80:	08007a97 	.word	0x08007a97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
    break;
 8007a88:	e00b      	b.n	8007aa2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8e:	e008      	b.n	8007aa2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
    break;
 8007a94:	e005      	b.n	8007aa2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a96:	2302      	movs	r3, #2
 8007a98:	73fb      	strb	r3, [r7, #15]
    break;
 8007a9a:	e002      	b.n	8007aa2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa0:	bf00      	nop
  }
  return usb_status;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
 8007ac8:	e001      	b.n	8007ace <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007aca:	2301      	movs	r3, #1
 8007acc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	4803      	ldr	r0, [pc, #12]	; (8007ae4 <MX_DriverVbusFS+0x34>)
 8007ad6:	f7f9 fcd5 	bl	8001484 <HAL_GPIO_WritePin>
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40020800 	.word	0x40020800

08007ae8 <malloc>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <malloc+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f000 b82b 	b.w	8007b48 <_malloc_r>
 8007af2:	bf00      	nop
 8007af4:	20000078 	.word	0x20000078

08007af8 <free>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <free+0xc>)
 8007afa:	4601      	mov	r1, r0
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	f000 b8f3 	b.w	8007ce8 <_free_r>
 8007b02:	bf00      	nop
 8007b04:	20000078 	.word	0x20000078

08007b08 <sbrk_aligned>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4e0e      	ldr	r6, [pc, #56]	; (8007b44 <sbrk_aligned+0x3c>)
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	6831      	ldr	r1, [r6, #0]
 8007b10:	4605      	mov	r5, r0
 8007b12:	b911      	cbnz	r1, 8007b1a <sbrk_aligned+0x12>
 8007b14:	f000 f8ac 	bl	8007c70 <_sbrk_r>
 8007b18:	6030      	str	r0, [r6, #0]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 f8a7 	bl	8007c70 <_sbrk_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	d00a      	beq.n	8007b3c <sbrk_aligned+0x34>
 8007b26:	1cc4      	adds	r4, r0, #3
 8007b28:	f024 0403 	bic.w	r4, r4, #3
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	d007      	beq.n	8007b40 <sbrk_aligned+0x38>
 8007b30:	1a21      	subs	r1, r4, r0
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f89c 	bl	8007c70 <_sbrk_r>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d101      	bne.n	8007b40 <sbrk_aligned+0x38>
 8007b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b40:	4620      	mov	r0, r4
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	20000878 	.word	0x20000878

08007b48 <_malloc_r>:
 8007b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b4c:	1ccd      	adds	r5, r1, #3
 8007b4e:	f025 0503 	bic.w	r5, r5, #3
 8007b52:	3508      	adds	r5, #8
 8007b54:	2d0c      	cmp	r5, #12
 8007b56:	bf38      	it	cc
 8007b58:	250c      	movcc	r5, #12
 8007b5a:	2d00      	cmp	r5, #0
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	db01      	blt.n	8007b64 <_malloc_r+0x1c>
 8007b60:	42a9      	cmp	r1, r5
 8007b62:	d905      	bls.n	8007b70 <_malloc_r+0x28>
 8007b64:	230c      	movs	r3, #12
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	2600      	movs	r6, #0
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c44 <_malloc_r+0xfc>
 8007b74:	f000 f868 	bl	8007c48 <__malloc_lock>
 8007b78:	f8d8 3000 	ldr.w	r3, [r8]
 8007b7c:	461c      	mov	r4, r3
 8007b7e:	bb5c      	cbnz	r4, 8007bd8 <_malloc_r+0x90>
 8007b80:	4629      	mov	r1, r5
 8007b82:	4638      	mov	r0, r7
 8007b84:	f7ff ffc0 	bl	8007b08 <sbrk_aligned>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	d155      	bne.n	8007c3a <_malloc_r+0xf2>
 8007b8e:	f8d8 4000 	ldr.w	r4, [r8]
 8007b92:	4626      	mov	r6, r4
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	d145      	bne.n	8007c24 <_malloc_r+0xdc>
 8007b98:	2c00      	cmp	r4, #0
 8007b9a:	d048      	beq.n	8007c2e <_malloc_r+0xe6>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	eb04 0903 	add.w	r9, r4, r3
 8007ba6:	f000 f863 	bl	8007c70 <_sbrk_r>
 8007baa:	4581      	cmp	r9, r0
 8007bac:	d13f      	bne.n	8007c2e <_malloc_r+0xe6>
 8007bae:	6821      	ldr	r1, [r4, #0]
 8007bb0:	1a6d      	subs	r5, r5, r1
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff ffa7 	bl	8007b08 <sbrk_aligned>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d037      	beq.n	8007c2e <_malloc_r+0xe6>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	442b      	add	r3, r5
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d038      	beq.n	8007c3e <_malloc_r+0xf6>
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	42a2      	cmp	r2, r4
 8007bd0:	d12b      	bne.n	8007c2a <_malloc_r+0xe2>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	e00f      	b.n	8007bf8 <_malloc_r+0xb0>
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	1b52      	subs	r2, r2, r5
 8007bdc:	d41f      	bmi.n	8007c1e <_malloc_r+0xd6>
 8007bde:	2a0b      	cmp	r2, #11
 8007be0:	d917      	bls.n	8007c12 <_malloc_r+0xca>
 8007be2:	1961      	adds	r1, r4, r5
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	6025      	str	r5, [r4, #0]
 8007be8:	bf18      	it	ne
 8007bea:	6059      	strne	r1, [r3, #4]
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	bf08      	it	eq
 8007bf0:	f8c8 1000 	streq.w	r1, [r8]
 8007bf4:	5162      	str	r2, [r4, r5]
 8007bf6:	604b      	str	r3, [r1, #4]
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f104 060b 	add.w	r6, r4, #11
 8007bfe:	f000 f829 	bl	8007c54 <__malloc_unlock>
 8007c02:	f026 0607 	bic.w	r6, r6, #7
 8007c06:	1d23      	adds	r3, r4, #4
 8007c08:	1af2      	subs	r2, r6, r3
 8007c0a:	d0ae      	beq.n	8007b6a <_malloc_r+0x22>
 8007c0c:	1b9b      	subs	r3, r3, r6
 8007c0e:	50a3      	str	r3, [r4, r2]
 8007c10:	e7ab      	b.n	8007b6a <_malloc_r+0x22>
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	d1dd      	bne.n	8007bd4 <_malloc_r+0x8c>
 8007c18:	f8c8 2000 	str.w	r2, [r8]
 8007c1c:	e7ec      	b.n	8007bf8 <_malloc_r+0xb0>
 8007c1e:	4623      	mov	r3, r4
 8007c20:	6864      	ldr	r4, [r4, #4]
 8007c22:	e7ac      	b.n	8007b7e <_malloc_r+0x36>
 8007c24:	4634      	mov	r4, r6
 8007c26:	6876      	ldr	r6, [r6, #4]
 8007c28:	e7b4      	b.n	8007b94 <_malloc_r+0x4c>
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	e7cc      	b.n	8007bc8 <_malloc_r+0x80>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	4638      	mov	r0, r7
 8007c34:	f000 f80e 	bl	8007c54 <__malloc_unlock>
 8007c38:	e797      	b.n	8007b6a <_malloc_r+0x22>
 8007c3a:	6025      	str	r5, [r4, #0]
 8007c3c:	e7dc      	b.n	8007bf8 <_malloc_r+0xb0>
 8007c3e:	605b      	str	r3, [r3, #4]
 8007c40:	deff      	udf	#255	; 0xff
 8007c42:	bf00      	nop
 8007c44:	20000874 	.word	0x20000874

08007c48 <__malloc_lock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_lock+0x8>)
 8007c4a:	f000 b84b 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007c4e:	bf00      	nop
 8007c50:	200009b8 	.word	0x200009b8

08007c54 <__malloc_unlock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_unlock+0x8>)
 8007c56:	f000 b846 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	200009b8 	.word	0x200009b8

08007c60 <memset>:
 8007c60:	4402      	add	r2, r0
 8007c62:	4603      	mov	r3, r0
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d100      	bne.n	8007c6a <memset+0xa>
 8007c68:	4770      	bx	lr
 8007c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6e:	e7f9      	b.n	8007c64 <memset+0x4>

08007c70 <_sbrk_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d06      	ldr	r5, [pc, #24]	; (8007c8c <_sbrk_r+0x1c>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	f7f9 f832 	bl	8000ce4 <_sbrk>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_sbrk_r+0x1a>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_sbrk_r+0x1a>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	200009b4 	.word	0x200009b4

08007c90 <__errno>:
 8007c90:	4b01      	ldr	r3, [pc, #4]	; (8007c98 <__errno+0x8>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000078 	.word	0x20000078

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	; (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	; (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	; (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	; (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f000 f866 	bl	8007d80 <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	08007dbc 	.word	0x08007dbc
 8007cd8:	08007dbc 	.word	0x08007dbc
 8007cdc:	08007dbc 	.word	0x08007dbc
 8007ce0:	08007dc0 	.word	0x08007dc0

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <_free_r>:
 8007ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d044      	beq.n	8007d78 <_free_r+0x90>
 8007cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf2:	9001      	str	r0, [sp, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cfa:	bfb8      	it	lt
 8007cfc:	18e4      	addlt	r4, r4, r3
 8007cfe:	f7ff ffa3 	bl	8007c48 <__malloc_lock>
 8007d02:	4a1e      	ldr	r2, [pc, #120]	; (8007d7c <_free_r+0x94>)
 8007d04:	9801      	ldr	r0, [sp, #4]
 8007d06:	6813      	ldr	r3, [r2, #0]
 8007d08:	b933      	cbnz	r3, 8007d18 <_free_r+0x30>
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6014      	str	r4, [r2, #0]
 8007d0e:	b003      	add	sp, #12
 8007d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d14:	f7ff bf9e 	b.w	8007c54 <__malloc_unlock>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d908      	bls.n	8007d2e <_free_r+0x46>
 8007d1c:	6825      	ldr	r5, [r4, #0]
 8007d1e:	1961      	adds	r1, r4, r5
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf01      	itttt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	1949      	addeq	r1, r1, r5
 8007d2a:	6021      	streq	r1, [r4, #0]
 8007d2c:	e7ed      	b.n	8007d0a <_free_r+0x22>
 8007d2e:	461a      	mov	r2, r3
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	b10b      	cbz	r3, 8007d38 <_free_r+0x50>
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d9fa      	bls.n	8007d2e <_free_r+0x46>
 8007d38:	6811      	ldr	r1, [r2, #0]
 8007d3a:	1855      	adds	r5, r2, r1
 8007d3c:	42a5      	cmp	r5, r4
 8007d3e:	d10b      	bne.n	8007d58 <_free_r+0x70>
 8007d40:	6824      	ldr	r4, [r4, #0]
 8007d42:	4421      	add	r1, r4
 8007d44:	1854      	adds	r4, r2, r1
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	6011      	str	r1, [r2, #0]
 8007d4a:	d1e0      	bne.n	8007d0e <_free_r+0x26>
 8007d4c:	681c      	ldr	r4, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	6053      	str	r3, [r2, #4]
 8007d52:	440c      	add	r4, r1
 8007d54:	6014      	str	r4, [r2, #0]
 8007d56:	e7da      	b.n	8007d0e <_free_r+0x26>
 8007d58:	d902      	bls.n	8007d60 <_free_r+0x78>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	e7d6      	b.n	8007d0e <_free_r+0x26>
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf04      	itt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	bf04      	itt	eq
 8007d70:	1949      	addeq	r1, r1, r5
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	6054      	str	r4, [r2, #4]
 8007d76:	e7ca      	b.n	8007d0e <_free_r+0x26>
 8007d78:	b003      	add	sp, #12
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	20000874 	.word	0x20000874

08007d80 <_init>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr

08007d8c <_fini>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr
